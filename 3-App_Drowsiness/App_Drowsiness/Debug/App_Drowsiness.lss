
App_Drowsiness.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000158a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  0000158a  0000161e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a5  008000b0  008000b0  0000166e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000166e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c8  00000000  00000000  00001708  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b39  00000000  00000000  00001bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000159e  00000000  00000000  00005709  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000251f  00000000  00000000  00006ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c44  00000000  00000000  000091c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001396  00000000  00000000  00009e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e7d  00000000  00000000  0000b1a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000420  00000000  00000000  0000e01f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__vector_4>
      14:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__vector_5>
      18:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__vector_6>
      1c:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__vector_7>
      20:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__vector_8>
      24:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 ac 04 	jmp	0x958	; 0x958 <__vector_11>
      30:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__vector_12>
      34:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <__vector_13>
      38:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 01 03 	jmp	0x602	; 0x602 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e8       	ldi	r30, 0x8A	; 138
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 35       	cpi	r26, 0x55	; 85
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 90 02 	call	0x520	; 0x520 <main>
      8a:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_SendString>:
	DIO_uint8PORTC, DIO_uint8PIN4
};

static uint8 speed_flag=1;
static void UART_SendString(const char *str)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	ec 01       	movw	r28, r24
	while (*str)
      98:	04 c0       	rjmp	.+8      	; 0xa2 <UART_SendString+0x10>
	{
		UART_Send_Data_PolingMethod(*str++);
      9a:	21 96       	adiw	r28, 0x01	; 1
      9c:	90 e0       	ldi	r25, 0x00	; 0
      9e:	0e 94 14 06 	call	0xc28	; 0xc28 <UART_Send_Data_PolingMethod>
};

static uint8 speed_flag=1;
static void UART_SendString(const char *str)
{
	while (*str)
      a2:	88 81       	ld	r24, Y
      a4:	81 11       	cpse	r24, r1
      a6:	f9 cf       	rjmp	.-14     	; 0x9a <UART_SendString+0x8>
	{
		UART_Send_Data_PolingMethod(*str++);
	}
}
      a8:	df 91       	pop	r29
      aa:	cf 91       	pop	r28
      ac:	08 95       	ret

000000ae <Send_GPS_Alert>:


static void Send_GPS_Alert(void)
{
      ae:	ef 92       	push	r14
      b0:	ff 92       	push	r15
      b2:	0f 93       	push	r16
      b4:	1f 93       	push	r17
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
      ba:	cd b7       	in	r28, 0x3d	; 61
      bc:	de b7       	in	r29, 0x3e	; 62
      be:	c4 56       	subi	r28, 0x64	; 100
      c0:	d1 09       	sbc	r29, r1
      c2:	0f b6       	in	r0, 0x3f	; 63
      c4:	f8 94       	cli
      c6:	de bf       	out	0x3e, r29	; 62
      c8:	0f be       	out	0x3f, r0	; 63
      ca:	cd bf       	out	0x3d, r28	; 61
	float32 lat = GPS_f32GetLatitude();
      cc:	0e 94 1f 02 	call	0x43e	; 0x43e <GPS_f32GetLatitude>
      d0:	16 2f       	mov	r17, r22
      d2:	07 2f       	mov	r16, r23
      d4:	f8 2e       	mov	r15, r24
      d6:	e9 2e       	mov	r14, r25
	float32 lon = GPS_f32GetLongitude();
      d8:	0e 94 28 02 	call	0x450	; 0x450 <GPS_f32GetLongitude>
	
	char buffer[100];
	sprintf(buffer, "ALERT: Drowsiness Detected! Location: Lat=%.5f, Lon=%.5f\r\n", lat, lon);
      dc:	9f 93       	push	r25
      de:	8f 93       	push	r24
      e0:	7f 93       	push	r23
      e2:	6f 93       	push	r22
      e4:	ef 92       	push	r14
      e6:	ff 92       	push	r15
      e8:	0f 93       	push	r16
      ea:	1f 93       	push	r17
      ec:	84 e6       	ldi	r24, 0x64	; 100
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	9f 93       	push	r25
      f2:	8f 93       	push	r24
      f4:	8e 01       	movw	r16, r28
      f6:	0f 5f       	subi	r16, 0xFF	; 255
      f8:	1f 4f       	sbci	r17, 0xFF	; 255
      fa:	1f 93       	push	r17
      fc:	0f 93       	push	r16
      fe:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <sprintf>
	UART_SendString(buffer);
     102:	c8 01       	movw	r24, r16
     104:	0e 94 49 00 	call	0x92	; 0x92 <UART_SendString>
}
     108:	0f b6       	in	r0, 0x3f	; 63
     10a:	f8 94       	cli
     10c:	de bf       	out	0x3e, r29	; 62
     10e:	0f be       	out	0x3f, r0	; 63
     110:	cd bf       	out	0x3d, r28	; 61
     112:	cc 59       	subi	r28, 0x9C	; 156
     114:	df 4f       	sbci	r29, 0xFF	; 255
     116:	0f b6       	in	r0, 0x3f	; 63
     118:	f8 94       	cli
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	0f be       	out	0x3f, r0	; 63
     11e:	cd bf       	out	0x3d, r28	; 61
     120:	df 91       	pop	r29
     122:	cf 91       	pop	r28
     124:	1f 91       	pop	r17
     126:	0f 91       	pop	r16
     128:	ff 90       	pop	r15
     12a:	ef 90       	pop	r14
     12c:	08 95       	ret

0000012e <Drowsiness_App_Init>:

static uint8 init_flag=1;
void Drowsiness_App_Init(void)
{
	TCRT_init(&irSensor);
     12e:	8b ea       	ldi	r24, 0xAB	; 171
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	0e 94 61 02 	call	0x4c2	; 0x4c2 <TCRT_init>
	ACCEL_Init();
     136:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <ACCEL_Init>
	BUZZER_voidInit(alertBuzzer);
     13a:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <alertBuzzer>
     13e:	70 91 a9 00 	lds	r23, 0x00A9	; 0x8000a9 <alertBuzzer+0x1>
     142:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <alertBuzzer+0x2>
     146:	0e 94 9d 01 	call	0x33a	; 0x33a <BUZZER_voidInit>
	LED_uint8State(&alertLED, LED_uint8OFF);
     14a:	60 e0       	ldi	r22, 0x00	; 0
     14c:	85 ea       	ldi	r24, 0xA5	; 165
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	0e 94 31 02 	call	0x462	; 0x462 <LED_uint8State>
	DC_MOTOR_voidInit(&vehicleMotor);
     154:	8f e9       	ldi	r24, 0x9F	; 159
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	0e 94 ef 01 	call	0x3de	; 0x3de <DC_MOTOR_voidInit>
	


	
	DC_MOTOR_voidSetSpeed(&vehicleMotor, NORMAL_SPEED);
     15c:	66 e4       	ldi	r22, 0x46	; 70
     15e:	8f e9       	ldi	r24, 0x9F	; 159
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	0e 94 09 02 	call	0x412	; 0x412 <DC_MOTOR_voidSetSpeed>
     166:	08 95       	ret

00000168 <Drowsiness_App_Update>:
}

void Drowsiness_App_Update(void)
{
     168:	1f 93       	push	r17
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
     16e:	cd b7       	in	r28, 0x3d	; 61
     170:	de b7       	in	r29, 0x3e	; 62
     172:	27 97       	sbiw	r28, 0x07	; 7
     174:	0f b6       	in	r0, 0x3f	; 63
     176:	f8 94       	cli
     178:	de bf       	out	0x3e, r29	; 62
     17a:	0f be       	out	0x3f, r0	; 63
     17c:	cd bf       	out	0x3d, r28	; 61
	static uint32_t eyeClosedTimeMs = 0;

	uint8_t logicVal = 1;
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	89 83       	std	Y+1, r24	; 0x01
	TCRT_read_digital_value(&irSensor, &logicVal);
     182:	be 01       	movw	r22, r28
     184:	6f 5f       	subi	r22, 0xFF	; 255
     186:	7f 4f       	sbci	r23, 0xFF	; 255
     188:	8b ea       	ldi	r24, 0xAB	; 171
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	0e 94 80 02 	call	0x500	; 0x500 <TCRT_read_digital_value>

	if (logicVal == 0)
     190:	89 81       	ldd	r24, Y+1	; 0x01
     192:	81 11       	cpse	r24, r1
     194:	15 c0       	rjmp	.+42     	; 0x1c0 <Drowsiness_App_Update+0x58>
	{
		eyeClosedTimeMs += 100;
     196:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__data_end>
     19a:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__data_end+0x1>
     19e:	a0 91 b2 00 	lds	r26, 0x00B2	; 0x8000b2 <__data_end+0x2>
     1a2:	b0 91 b3 00 	lds	r27, 0x00B3	; 0x8000b3 <__data_end+0x3>
     1a6:	8c 59       	subi	r24, 0x9C	; 156
     1a8:	9f 4f       	sbci	r25, 0xFF	; 255
     1aa:	af 4f       	sbci	r26, 0xFF	; 255
     1ac:	bf 4f       	sbci	r27, 0xFF	; 255
     1ae:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__data_end>
     1b2:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__data_end+0x1>
     1b6:	a0 93 b2 00 	sts	0x00B2, r26	; 0x8000b2 <__data_end+0x2>
     1ba:	b0 93 b3 00 	sts	0x00B3, r27	; 0x8000b3 <__data_end+0x3>
     1be:	08 c0       	rjmp	.+16     	; 0x1d0 <Drowsiness_App_Update+0x68>
	}
	else
	{
		eyeClosedTimeMs = 0;
     1c0:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__data_end>
     1c4:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__data_end+0x1>
     1c8:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__data_end+0x2>
     1cc:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__data_end+0x3>
	}

	uint16_t accX, accY, accZ;
	ACCEL_ReadX(&accX);
     1d0:	ce 01       	movw	r24, r28
     1d2:	02 96       	adiw	r24, 0x02	; 2
     1d4:	0e 94 8e 01 	call	0x31c	; 0x31c <ACCEL_ReadX>
	ACCEL_ReadY(&accY);
     1d8:	ce 01       	movw	r24, r28
     1da:	04 96       	adiw	r24, 0x04	; 4
     1dc:	0e 94 93 01 	call	0x326	; 0x326 <ACCEL_ReadY>
	ACCEL_ReadZ(&accZ);
     1e0:	ce 01       	movw	r24, r28
     1e2:	06 96       	adiw	r24, 0x06	; 6
     1e4:	0e 94 98 01 	call	0x330	; 0x330 <ACCEL_ReadZ>

	uint8_t tiltDetected = (accX > ACC_TILT_THRESHOLD) || (accY > ACC_TILT_THRESHOLD);
     1e8:	8a 81       	ldd	r24, Y+2	; 0x02
     1ea:	9b 81       	ldd	r25, Y+3	; 0x03
     1ec:	89 35       	cpi	r24, 0x59	; 89
     1ee:	92 40       	sbci	r25, 0x02	; 2
     1f0:	38 f4       	brcc	.+14     	; 0x200 <Drowsiness_App_Update+0x98>
     1f2:	8c 81       	ldd	r24, Y+4	; 0x04
     1f4:	9d 81       	ldd	r25, Y+5	; 0x05
     1f6:	89 35       	cpi	r24, 0x59	; 89
     1f8:	92 40       	sbci	r25, 0x02	; 2
     1fa:	20 f0       	brcs	.+8      	; 0x204 <Drowsiness_App_Update+0x9c>
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	03 c0       	rjmp	.+6      	; 0x206 <Drowsiness_App_Update+0x9e>
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	01 c0       	rjmp	.+2      	; 0x206 <Drowsiness_App_Update+0x9e>
     204:	80 e0       	ldi	r24, 0x00	; 0

	if ((eyeClosedTimeMs >= EYE_CLOSED_MIN_MS) || tiltDetected)
     206:	40 91 b0 00 	lds	r20, 0x00B0	; 0x8000b0 <__data_end>
     20a:	50 91 b1 00 	lds	r21, 0x00B1	; 0x8000b1 <__data_end+0x1>
     20e:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <__data_end+0x2>
     212:	70 91 b3 00 	lds	r23, 0x00B3	; 0x8000b3 <__data_end+0x3>
     216:	48 32       	cpi	r20, 0x28	; 40
     218:	51 05       	cpc	r21, r1
     21a:	61 05       	cpc	r22, r1
     21c:	71 05       	cpc	r23, r1
     21e:	10 f4       	brcc	.+4      	; 0x224 <Drowsiness_App_Update+0xbc>
     220:	88 23       	and	r24, r24
     222:	59 f1       	breq	.+86     	; 0x27a <Drowsiness_App_Update+0x112>
	{
		BUZZER_voidOn(alertBuzzer);
     224:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <alertBuzzer>
     228:	70 91 a9 00 	lds	r23, 0x00A9	; 0x8000a9 <alertBuzzer+0x1>
     22c:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <alertBuzzer+0x2>
     230:	0e 94 b9 01 	call	0x372	; 0x372 <BUZZER_voidOn>
		LED_uint8State(&alertLED, LED_uint8ON);
     234:	61 e0       	ldi	r22, 0x01	; 1
     236:	85 ea       	ldi	r24, 0xA5	; 165
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 31 02 	call	0x462	; 0x462 <LED_uint8State>
		if(1==speed_flag)
     23e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     242:	81 30       	cpi	r24, 0x01	; 1
     244:	99 f4       	brne	.+38     	; 0x26c <Drowsiness_App_Update+0x104>
     246:	0d c0       	rjmp	.+26     	; 0x262 <Drowsiness_App_Update+0xfa>
		{
			for(uint8 speed=NORMAL_SPEED;speed>STOP_SPEED;speed--)
			{
				DC_MOTOR_voidSetSpeed(&vehicleMotor, speed);
     248:	61 2f       	mov	r22, r17
     24a:	8f e9       	ldi	r24, 0x9F	; 159
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 09 02 	call	0x412	; 0x412 <DC_MOTOR_voidSetSpeed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     252:	8f e1       	ldi	r24, 0x1F	; 31
     254:	9e e4       	ldi	r25, 0x4E	; 78
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	f1 f7       	brne	.-4      	; 0x256 <Drowsiness_App_Update+0xee>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <Drowsiness_App_Update+0xf4>
     25c:	00 00       	nop
	{
		BUZZER_voidOn(alertBuzzer);
		LED_uint8State(&alertLED, LED_uint8ON);
		if(1==speed_flag)
		{
			for(uint8 speed=NORMAL_SPEED;speed>STOP_SPEED;speed--)
     25e:	11 50       	subi	r17, 0x01	; 1
     260:	01 c0       	rjmp	.+2      	; 0x264 <Drowsiness_App_Update+0xfc>
     262:	16 e4       	ldi	r17, 0x46	; 70
     264:	11 11       	cpse	r17, r1
     266:	f0 cf       	rjmp	.-32     	; 0x248 <Drowsiness_App_Update+0xe0>
			{
				DC_MOTOR_voidSetSpeed(&vehicleMotor, speed);
				_delay_ms(80);
			}
			speed_flag=0;
     268:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>

		
		//DC_MOTOR_voidStop(&vehicleMotor);
		if(1==init_flag)
		{
				UART_INTI();
     26c:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_INTI>
				GPS_voidInit();
     270:	0e 94 1b 02 	call	0x436	; 0x436 <GPS_voidInit>
				init_flag-0;
		}
	
		Send_GPS_Alert();
     274:	0e 94 57 00 	call	0xae	; 0xae <Send_GPS_Alert>
     278:	15 c0       	rjmp	.+42     	; 0x2a4 <Drowsiness_App_Update+0x13c>
	}
	else
	{
		BUZZER_voidOff(alertBuzzer);
     27a:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <alertBuzzer>
     27e:	70 91 a9 00 	lds	r23, 0x00A9	; 0x8000a9 <alertBuzzer+0x1>
     282:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <alertBuzzer+0x2>
     286:	0e 94 c8 01 	call	0x390	; 0x390 <BUZZER_voidOff>
		LED_uint8State(&alertLED, LED_uint8OFF);
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	85 ea       	ldi	r24, 0xA5	; 165
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 31 02 	call	0x462	; 0x462 <LED_uint8State>
		speed_flag=1;
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

		
		DC_MOTOR_voidSetSpeed(&vehicleMotor, NORMAL_SPEED);
     29a:	66 e4       	ldi	r22, 0x46	; 70
     29c:	8f e9       	ldi	r24, 0x9F	; 159
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	0e 94 09 02 	call	0x412	; 0x412 <DC_MOTOR_voidSetSpeed>
     2a4:	87 ea       	ldi	r24, 0xA7	; 167
     2a6:	91 e6       	ldi	r25, 0x61	; 97
     2a8:	01 97       	sbiw	r24, 0x01	; 1
     2aa:	f1 f7       	brne	.-4      	; 0x2a8 <Drowsiness_App_Update+0x140>
     2ac:	00 c0       	rjmp	.+0      	; 0x2ae <Drowsiness_App_Update+0x146>
     2ae:	00 00       	nop
	}

	_delay_ms(100);
}
     2b0:	27 96       	adiw	r28, 0x07	; 7
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	f8 94       	cli
     2b6:	de bf       	out	0x3e, r29	; 62
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	cd bf       	out	0x3d, r28	; 61
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	1f 91       	pop	r17
     2c2:	08 95       	ret

000002c4 <DIO_PIN_INIT>:

void DIO_PIN_INIT(void)
{
	DIO_set_pin_direction(DIO_uint8PORTB,DIO_uint8PIN0,DIO_uint8PIN_OUTPUT);
     2c4:	41 e0       	ldi	r20, 0x01	; 1
     2c6:	60 e0       	ldi	r22, 0x00	; 0
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	0e 94 2a 03 	call	0x654	; 0x654 <DIO_set_pin_direction>
	
	
	DIO_set_pin_direction(DIO_uint8PORTA,DIO_uint8PIN0,DIO_uint8PIN_INPUT);
     2ce:	40 e0       	ldi	r20, 0x00	; 0
     2d0:	60 e0       	ldi	r22, 0x00	; 0
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	0e 94 2a 03 	call	0x654	; 0x654 <DIO_set_pin_direction>
	DIO_set_pin_direction(DIO_uint8PORTA,DIO_uint8PIN1,DIO_uint8PIN_INPUT);
     2d8:	40 e0       	ldi	r20, 0x00	; 0
     2da:	61 e0       	ldi	r22, 0x01	; 1
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	0e 94 2a 03 	call	0x654	; 0x654 <DIO_set_pin_direction>
	DIO_set_pin_direction(DIO_uint8PORTA,DIO_uint8PIN2,DIO_uint8PIN_INPUT);
     2e2:	40 e0       	ldi	r20, 0x00	; 0
     2e4:	62 e0       	ldi	r22, 0x02	; 2
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	0e 94 2a 03 	call	0x654	; 0x654 <DIO_set_pin_direction>
	DIO_set_pin_direction(DIO_uint8PORTA,DIO_uint8PIN3,DIO_uint8PIN_INPUT);
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	63 e0       	ldi	r22, 0x03	; 3
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	0e 94 2a 03 	call	0x654	; 0x654 <DIO_set_pin_direction>
     2f6:	08 95       	ret

000002f8 <ACCEL_Init>:
#include "Accel_Sensor.h"
#include "../../MCAL/ADC/ADC.h"   

void ACCEL_Init(void)
{
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	1f 92       	push	r1
     2fe:	cd b7       	in	r28, 0x3d	; 61
     300:	de b7       	in	r29, 0x3e	; 62
	ADC_t config = {
     302:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <receiving_ptr+0x2>
     306:	89 83       	std	Y+1, r24	; 0x01
		.ADC_prescaler = ADC_PRESCALER_DIV_64,
		.ADC_voltage_refernce = ADC_AVCC_VOLTAGE_REF,
		.ADC_interrupt_state = ADC_INTERRUPT_DISABLED
	};

	ADC_init(&config);
     308:	ce 01       	movw	r24, r28
     30a:	01 96       	adiw	r24, 0x01	; 1
     30c:	0e 94 97 02 	call	0x52e	; 0x52e <ADC_init>
	ADC_enable();
     310:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <ADC_enable>
}
     314:	0f 90       	pop	r0
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <ACCEL_ReadX>:

STD_RETURN_TYPE ACCEL_ReadX(uint16 *xVal)
{
	return ADC_start_conversion_blocking(ACCEL_X_CHANNEL, xVal);
     31c:	bc 01       	movw	r22, r24
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ADC_start_conversion_blocking>
}
     324:	08 95       	ret

00000326 <ACCEL_ReadY>:

STD_RETURN_TYPE ACCEL_ReadY(uint16 *yVal)
{
	return ADC_start_conversion_blocking(ACCEL_Y_CHANNEL, yVal);
     326:	bc 01       	movw	r22, r24
     328:	82 e0       	ldi	r24, 0x02	; 2
     32a:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ADC_start_conversion_blocking>
}
     32e:	08 95       	ret

00000330 <ACCEL_ReadZ>:

STD_RETURN_TYPE ACCEL_ReadZ(uint16 *zVal)
{
	return ADC_start_conversion_blocking(ACCEL_Z_CHANNEL, zVal);
     330:	bc 01       	movw	r22, r24
     332:	83 e0       	ldi	r24, 0x03	; 3
     334:	0e 94 e5 02 	call	0x5ca	; 0x5ca <ADC_start_conversion_blocking>
     338:	08 95       	ret

0000033a <BUZZER_voidInit>:
/******************************************************************/

#include "BUZZER_interface.h"
#include "../../MCAL/DIO/DIO_Interface.h"

void BUZZER_voidInit(BUZZER_T buzzer) {
     33a:	1f 93       	push	r17
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	c6 2f       	mov	r28, r22
     342:	d7 2f       	mov	r29, r23
     344:	18 2f       	mov	r17, r24
	DIO_set_pin_direction(buzzer.port, buzzer.pin, DIO_uint8PIN_OUTPUT);
     346:	41 e0       	ldi	r20, 0x01	; 1
     348:	67 2f       	mov	r22, r23
     34a:	8c 2f       	mov	r24, r28
     34c:	0e 94 2a 03 	call	0x654	; 0x654 <DIO_set_pin_direction>
	
	if (buzzer.Active_State == BUZZER_ACTIVE_HIGH) {
     350:	11 30       	cpi	r17, 0x01	; 1
     352:	31 f4       	brne	.+12     	; 0x360 <BUZZER_voidInit+0x26>
		DIO_set_pin_logic(buzzer.port, buzzer.pin, DIO_uint8PIN_LOW);
     354:	40 e0       	ldi	r20, 0x00	; 0
     356:	6d 2f       	mov	r22, r29
     358:	8c 2f       	mov	r24, r28
     35a:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_set_pin_logic>
     35e:	05 c0       	rjmp	.+10     	; 0x36a <BUZZER_voidInit+0x30>
		} else {
		DIO_set_pin_logic(buzzer.port, buzzer.pin, DIO_uint8PIN_HIGH);
     360:	41 e0       	ldi	r20, 0x01	; 1
     362:	6d 2f       	mov	r22, r29
     364:	8c 2f       	mov	r24, r28
     366:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_set_pin_logic>
	}
}
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	1f 91       	pop	r17
     370:	08 95       	ret

00000372 <BUZZER_voidOn>:

void BUZZER_voidOn(BUZZER_T buzzer) {
     372:	96 2f       	mov	r25, r22
	if (buzzer.Active_State == BUZZER_ACTIVE_HIGH) {
     374:	81 30       	cpi	r24, 0x01	; 1
     376:	31 f4       	brne	.+12     	; 0x384 <BUZZER_voidOn+0x12>
		DIO_set_pin_logic(buzzer.port, buzzer.pin, DIO_uint8PIN_HIGH);
     378:	41 e0       	ldi	r20, 0x01	; 1
     37a:	67 2f       	mov	r22, r23
     37c:	89 2f       	mov	r24, r25
     37e:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_set_pin_logic>
     382:	08 95       	ret
		} else {
		DIO_set_pin_logic(buzzer.port, buzzer.pin, DIO_uint8PIN_LOW);
     384:	40 e0       	ldi	r20, 0x00	; 0
     386:	67 2f       	mov	r22, r23
     388:	89 2f       	mov	r24, r25
     38a:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_set_pin_logic>
     38e:	08 95       	ret

00000390 <BUZZER_voidOff>:
	}
}

void BUZZER_voidOff(BUZZER_T buzzer) {
     390:	96 2f       	mov	r25, r22
	if (buzzer.Active_State == BUZZER_ACTIVE_HIGH) {
     392:	81 30       	cpi	r24, 0x01	; 1
     394:	31 f4       	brne	.+12     	; 0x3a2 <BUZZER_voidOff+0x12>
		DIO_set_pin_logic(buzzer.port, buzzer.pin, DIO_uint8PIN_LOW);
     396:	40 e0       	ldi	r20, 0x00	; 0
     398:	67 2f       	mov	r22, r23
     39a:	89 2f       	mov	r24, r25
     39c:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_set_pin_logic>
     3a0:	08 95       	ret
		} else {
		DIO_set_pin_logic(buzzer.port, buzzer.pin, DIO_uint8PIN_HIGH);
     3a2:	41 e0       	ldi	r20, 0x01	; 1
     3a4:	67 2f       	mov	r22, r23
     3a6:	89 2f       	mov	r24, r25
     3a8:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_set_pin_logic>
     3ac:	08 95       	ret

000003ae <DC_MOTOR_voidStop>:
	DIO_set_pin_logic(motor->PORT_IN2, motor->PIN_IN2, DIO_uint8PIN_HIGH);
	DIO_set_pin_logic(motor->PORT_EN,  motor->PIN_EN,  DIO_uint8PIN_HIGH);
}

void DC_MOTOR_voidStop(const DC_MOTOR_t* motor)
{
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	ec 01       	movw	r28, r24
	TIMER0_set_duty_cycle(0);
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	0e 94 95 04 	call	0x92a	; 0x92a <TIMER0_set_duty_cycle>
	DIO_set_pin_logic(motor->PORT_IN1, motor->PIN_IN1, DIO_uint8PIN_LOW);
     3ba:	40 e0       	ldi	r20, 0x00	; 0
     3bc:	69 81       	ldd	r22, Y+1	; 0x01
     3be:	88 81       	ld	r24, Y
     3c0:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_set_pin_logic>
	DIO_set_pin_logic(motor->PORT_IN2, motor->PIN_IN2, DIO_uint8PIN_LOW);
     3c4:	40 e0       	ldi	r20, 0x00	; 0
     3c6:	6b 81       	ldd	r22, Y+3	; 0x03
     3c8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ca:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_set_pin_logic>
	DIO_set_pin_logic(motor->PORT_EN,  motor->PIN_EN,  DIO_uint8PIN_LOW);
     3ce:	40 e0       	ldi	r20, 0x00	; 0
     3d0:	6d 81       	ldd	r22, Y+5	; 0x05
     3d2:	8c 81       	ldd	r24, Y+4	; 0x04
     3d4:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_set_pin_logic>
}
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
     3dc:	08 95       	ret

000003de <DC_MOTOR_voidInit>:
#include "../../MCAL/Timer0/Timer0.h"
#include "../../MCAL/Timer2/Timer2.h"


void DC_MOTOR_voidInit(const DC_MOTOR_t* motor)
{
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	ec 01       	movw	r28, r24
	DIO_set_pin_direction(motor->PORT_IN1, motor->PIN_IN1, DIO_uint8PIN_OUTPUT);
     3e4:	41 e0       	ldi	r20, 0x01	; 1
     3e6:	69 81       	ldd	r22, Y+1	; 0x01
     3e8:	88 81       	ld	r24, Y
     3ea:	0e 94 2a 03 	call	0x654	; 0x654 <DIO_set_pin_direction>
	DIO_set_pin_direction(motor->PORT_IN2, motor->PIN_IN2, DIO_uint8PIN_OUTPUT);
     3ee:	41 e0       	ldi	r20, 0x01	; 1
     3f0:	6b 81       	ldd	r22, Y+3	; 0x03
     3f2:	8a 81       	ldd	r24, Y+2	; 0x02
     3f4:	0e 94 2a 03 	call	0x654	; 0x654 <DIO_set_pin_direction>
	DIO_set_pin_direction(motor->PORT_EN,  motor->PIN_EN,  DIO_uint8PIN_OUTPUT);
     3f8:	41 e0       	ldi	r20, 0x01	; 1
     3fa:	6d 81       	ldd	r22, Y+5	; 0x05
     3fc:	8c 81       	ldd	r24, Y+4	; 0x04
     3fe:	0e 94 2a 03 	call	0x654	; 0x654 <DIO_set_pin_direction>
	TIMER0_confiG_file_init();
     402:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <TIMER0_confiG_file_init>
	
	/** Default motor state: stopped **/
	DC_MOTOR_voidStop(motor);
     406:	ce 01       	movw	r24, r28
     408:	0e 94 d7 01 	call	0x3ae	; 0x3ae <DC_MOTOR_voidStop>
}
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	08 95       	ret

00000412 <DC_MOTOR_voidSetSpeed>:
	DIO_set_pin_logic(motor->PORT_EN,  motor->PIN_EN,  DIO_uint8PIN_LOW);
}

void DC_MOTOR_voidSetSpeed(const DC_MOTOR_t* motor, uint8 speed_percent)
{
	if (motor == NULL || speed_percent > 100)
     412:	00 97       	sbiw	r24, 0x00	; 0
     414:	79 f0       	breq	.+30     	; 0x434 <DC_MOTOR_voidSetSpeed+0x22>
     416:	65 36       	cpi	r22, 0x65	; 101
     418:	68 f4       	brcc	.+26     	; 0x434 <DC_MOTOR_voidSetSpeed+0x22>
     41a:	fc 01       	movw	r30, r24
	return;

	// Determine which channel to use based on PIN_EN
	if (motor->PIN_EN == DIO_uint8PIN5)  // Assuming OC1A is on Pin 5
     41c:	85 81       	ldd	r24, Z+5	; 0x05
     41e:	85 30       	cpi	r24, 0x05	; 5
     420:	21 f4       	brne	.+8      	; 0x42a <DC_MOTOR_voidSetSpeed+0x18>
	{
		TIMER0_set_duty_cycle(speed_percent);
     422:	86 2f       	mov	r24, r22
     424:	0e 94 95 04 	call	0x92a	; 0x92a <TIMER0_set_duty_cycle>
     428:	08 95       	ret
	}
	else if (motor->PIN_EN == DIO_uint8PIN4)  // Assuming OC1B is on Pin 4
     42a:	84 30       	cpi	r24, 0x04	; 4
     42c:	19 f4       	brne	.+6      	; 0x434 <DC_MOTOR_voidSetSpeed+0x22>
	{
		TIMER0_set_duty_cycle(speed_percent);
     42e:	86 2f       	mov	r24, r22
     430:	0e 94 95 04 	call	0x92a	; 0x92a <TIMER0_set_duty_cycle>
     434:	08 95       	ret

00000436 <GPS_voidInit>:
    }
    return 0;
}

/** Getters **/
uint8 GPS_uint8GetSatelliteCount(void) { return GPS_Data.numSatellites; }
     436:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_INTI>
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	08 95       	ret

0000043e <GPS_f32GetLatitude>:
float32 GPS_f32GetLatitude(void)   { return GPS_Data.latitude; }
     43e:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <GPS_Data+0x2>
     442:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <GPS_Data+0x3>
     446:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <GPS_Data+0x4>
     44a:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <GPS_Data+0x5>
     44e:	08 95       	ret

00000450 <GPS_f32GetLongitude>:
float32 GPS_f32GetLongitude(void)  { return GPS_Data.longitude; }
     450:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <GPS_Data+0x6>
     454:	70 91 45 01 	lds	r23, 0x0145	; 0x800145 <GPS_Data+0x7>
     458:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <GPS_Data+0x8>
     45c:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <GPS_Data+0x9>
     460:	08 95       	ret

00000462 <LED_uint8State>:
Description: This function check if the led is connected by source or sink way then the state the user want then set the value of the pin.
Parameters: It takes struct containing port,pin, and connection state(source or sink), then the state the user needs (ON or OFF).
Return: Local_uint8ErrorState to check if there is error or not (0 => No error		1 => There is an error).
*/
uint8 LED_uint8State (LED_t* Copy_pLED_t1, uint8 Copy_uint8LEDState)
{
     462:	fc 01       	movw	r30, r24
	uint8 Local_uint8ErrorState=0; 
	
	if (Copy_pLED_t1->Conn_Type == LED_uint8Source)
     464:	92 81       	ldd	r25, Z+2	; 0x02
     466:	91 30       	cpi	r25, 0x01	; 1
     468:	91 f4       	brne	.+36     	; 0x48e <LED_uint8State+0x2c>
	{
		if (Copy_uint8LEDState == LED_uint8ON)
     46a:	61 30       	cpi	r22, 0x01	; 1
     46c:	39 f4       	brne	.+14     	; 0x47c <LED_uint8State+0x1a>
		{
			 DIO_set_pin_logic( Copy_pLED_t1->Port, Copy_pLED_t1->Pin, DIO_uint8PIN_HIGH);
     46e:	41 e0       	ldi	r20, 0x01	; 1
     470:	61 81       	ldd	r22, Z+1	; 0x01
     472:	80 81       	ld	r24, Z
     474:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_set_pin_logic>
Parameters: It takes struct containing port,pin, and connection state(source or sink), then the state the user needs (ON or OFF).
Return: Local_uint8ErrorState to check if there is error or not (0 => No error		1 => There is an error).
*/
uint8 LED_uint8State (LED_t* Copy_pLED_t1, uint8 Copy_uint8LEDState)
{
	uint8 Local_uint8ErrorState=0; 
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	08 95       	ret
	{
		if (Copy_uint8LEDState == LED_uint8ON)
		{
			 DIO_set_pin_logic( Copy_pLED_t1->Port, Copy_pLED_t1->Pin, DIO_uint8PIN_HIGH);
		}
		else if (Copy_uint8LEDState == LED_uint8OFF)
     47c:	61 11       	cpse	r22, r1
     47e:	1b c0       	rjmp	.+54     	; 0x4b6 <LED_uint8State+0x54>
		{
			 DIO_set_pin_logic( Copy_pLED_t1->Port, Copy_pLED_t1->Pin, DIO_uint8PIN_LOW);
     480:	40 e0       	ldi	r20, 0x00	; 0
     482:	61 81       	ldd	r22, Z+1	; 0x01
     484:	80 81       	ld	r24, Z
     486:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_set_pin_logic>
Parameters: It takes struct containing port,pin, and connection state(source or sink), then the state the user needs (ON or OFF).
Return: Local_uint8ErrorState to check if there is error or not (0 => No error		1 => There is an error).
*/
uint8 LED_uint8State (LED_t* Copy_pLED_t1, uint8 Copy_uint8LEDState)
{
	uint8 Local_uint8ErrorState=0; 
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	08 95       	ret
		else
		{
			Local_uint8ErrorState = 1;
		}
	}
	else if (Copy_pLED_t1->Conn_Type == LED_uint8Sink)
     48e:	91 11       	cpse	r25, r1
     490:	14 c0       	rjmp	.+40     	; 0x4ba <LED_uint8State+0x58>
	{
		if (Copy_uint8LEDState == LED_uint8ON)
     492:	61 30       	cpi	r22, 0x01	; 1
     494:	39 f4       	brne	.+14     	; 0x4a4 <LED_uint8State+0x42>
		{
			 DIO_set_pin_logic( Copy_pLED_t1->Port, Copy_pLED_t1->Pin, DIO_uint8PIN_LOW);
     496:	40 e0       	ldi	r20, 0x00	; 0
     498:	61 81       	ldd	r22, Z+1	; 0x01
     49a:	80 81       	ld	r24, Z
     49c:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_set_pin_logic>
Parameters: It takes struct containing port,pin, and connection state(source or sink), then the state the user needs (ON or OFF).
Return: Local_uint8ErrorState to check if there is error or not (0 => No error		1 => There is an error).
*/
uint8 LED_uint8State (LED_t* Copy_pLED_t1, uint8 Copy_uint8LEDState)
{
	uint8 Local_uint8ErrorState=0; 
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	08 95       	ret
	{
		if (Copy_uint8LEDState == LED_uint8ON)
		{
			 DIO_set_pin_logic( Copy_pLED_t1->Port, Copy_pLED_t1->Pin, DIO_uint8PIN_LOW);
		}
		else if (Copy_uint8LEDState == LED_uint8OFF)
     4a4:	61 11       	cpse	r22, r1
     4a6:	0b c0       	rjmp	.+22     	; 0x4be <LED_uint8State+0x5c>
		{
			DIO_set_pin_logic( Copy_pLED_t1->Port, Copy_pLED_t1->Pin, DIO_uint8PIN_HIGH);
     4a8:	41 e0       	ldi	r20, 0x01	; 1
     4aa:	61 81       	ldd	r22, Z+1	; 0x01
     4ac:	80 81       	ld	r24, Z
     4ae:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_set_pin_logic>
Parameters: It takes struct containing port,pin, and connection state(source or sink), then the state the user needs (ON or OFF).
Return: Local_uint8ErrorState to check if there is error or not (0 => No error		1 => There is an error).
*/
uint8 LED_uint8State (LED_t* Copy_pLED_t1, uint8 Copy_uint8LEDState)
{
	uint8 Local_uint8ErrorState=0; 
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	08 95       	ret
		{
			 DIO_set_pin_logic( Copy_pLED_t1->Port, Copy_pLED_t1->Pin, DIO_uint8PIN_LOW);
		}
		else
		{
			Local_uint8ErrorState = 1;
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	08 95       	ret
			Local_uint8ErrorState = 1;
		}
	}
	else
	{
		Local_uint8ErrorState = 1;
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	08 95       	ret
		{
			DIO_set_pin_logic( Copy_pLED_t1->Port, Copy_pLED_t1->Pin, DIO_uint8PIN_HIGH);
		}
		else
		{
			Local_uint8ErrorState = 1;
     4be:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_uint8ErrorState = 1;
	}
	
	return Local_uint8ErrorState;
}
     4c0:	08 95       	ret

000004c2 <TCRT_init>:
#include "TCRT.h"
volatile uint8 debug_flag=0;
static uint16 *TCRT_analog_value_ptr=NULL;
void TCRT_get_analog_value_nonblocking(void);
STD_RETURN_TYPE TCRT_init(const TCRT_t *TCRT_obj)
{
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
    STD_RETURN_TYPE ret=E_OK;
    if(NULL==TCRT_obj)
     4c6:	00 97       	sbiw	r24, 0x00	; 0
     4c8:	b9 f0       	breq	.+46     	; 0x4f8 <TCRT_init+0x36>
     4ca:	ec 01       	movw	r28, r24
        ret=E_NOK;
    }
    else
    {
        /*initializing pin with direction and initial state*/
       ret=(ret)&&(DIO_set_pin_direction(TCRT_obj->port,TCRT_obj->pin,DIO_uint8PIN_INPUT));
     4cc:	40 e0       	ldi	r20, 0x00	; 0
     4ce:	69 81       	ldd	r22, Y+1	; 0x01
     4d0:	88 81       	ld	r24, Y
     4d2:	0e 94 2a 03 	call	0x654	; 0x654 <DIO_set_pin_direction>
     4d6:	88 23       	and	r24, r24
     4d8:	11 f0       	breq	.+4      	; 0x4de <TCRT_init+0x1c>
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	01 c0       	rjmp	.+2      	; 0x4e0 <TCRT_init+0x1e>
     4de:	80 e0       	ldi	r24, 0x00	; 0
        ret=(ret)&&(DIO_set_pin_logic(TCRT_obj->port,TCRT_obj->pin,DIO_uint8PIN_LOW));
     4e0:	88 23       	and	r24, r24
     4e2:	29 f0       	breq	.+10     	; 0x4ee <TCRT_init+0x2c>
     4e4:	40 e0       	ldi	r20, 0x00	; 0
     4e6:	69 81       	ldd	r22, Y+1	; 0x01
     4e8:	88 81       	ld	r24, Y
     4ea:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_set_pin_logic>

        /*initializing ADC cofigurations*/
        ret=ADC_init(&(TCRT_obj->TCRT_ADC));
     4ee:	ce 01       	movw	r24, r28
     4f0:	02 96       	adiw	r24, 0x02	; 2
     4f2:	0e 94 97 02 	call	0x52e	; 0x52e <ADC_init>
     4f6:	01 c0       	rjmp	.+2      	; 0x4fa <TCRT_init+0x38>
STD_RETURN_TYPE TCRT_init(const TCRT_t *TCRT_obj)
{
    STD_RETURN_TYPE ret=E_OK;
    if(NULL==TCRT_obj)
    {
        ret=E_NOK;
     4f8:	80 e0       	ldi	r24, 0x00	; 0

        /*initializing ADC cofigurations*/
        ret=ADC_init(&(TCRT_obj->TCRT_ADC));
    }
    return ret;
}
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	08 95       	ret

00000500 <TCRT_read_digital_value>:
STD_RETURN_TYPE TCRT_read_digital_value(const TCRT_t *TCRT_obj,uint8 *logic)
{
    STD_RETURN_TYPE ret=E_OK;
    if((NULL==TCRT_obj)||(NULL==logic))
     500:	00 97       	sbiw	r24, 0x00	; 0
     502:	51 f0       	breq	.+20     	; 0x518 <TCRT_read_digital_value+0x18>
     504:	61 15       	cp	r22, r1
     506:	71 05       	cpc	r23, r1
     508:	49 f0       	breq	.+18     	; 0x51c <TCRT_read_digital_value+0x1c>
     50a:	ab 01       	movw	r20, r22
     50c:	fc 01       	movw	r30, r24
    {
        ret=E_NOK;
    }
    else
    {
        ret=DIO_read_pin_logic(TCRT_obj->port,TCRT_obj->pin,logic);
     50e:	61 81       	ldd	r22, Z+1	; 0x01
     510:	80 81       	ld	r24, Z
     512:	0e 94 30 04 	call	0x860	; 0x860 <DIO_read_pin_logic>
     516:	08 95       	ret
STD_RETURN_TYPE TCRT_read_digital_value(const TCRT_t *TCRT_obj,uint8 *logic)
{
    STD_RETURN_TYPE ret=E_OK;
    if((NULL==TCRT_obj)||(NULL==logic))
    {
        ret=E_NOK;
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	08 95       	ret
     51c:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        ret=DIO_read_pin_logic(TCRT_obj->port,TCRT_obj->pin,logic);
    }
    return ret;
}
     51e:	08 95       	ret

00000520 <main>:
uint8 proteus;

int main(void)
{
	
	DIO_PIN_INIT();
     520:	0e 94 62 01 	call	0x2c4	; 0x2c4 <DIO_PIN_INIT>
	Drowsiness_App_Init();
     524:	0e 94 97 00 	call	0x12e	; 0x12e <Drowsiness_App_Init>
	

	while (1)
	{
		
		Drowsiness_App_Update();
     528:	0e 94 b4 00 	call	0x168	; 0x168 <Drowsiness_App_Update>
     52c:	fd cf       	rjmp	.-6      	; 0x528 <main+0x8>

0000052e <ADC_init>:
	else
	{
		ADC_ISR_PTR=isr;
	}
	return ret;
}
     52e:	fc 01       	movw	r30, r24
     530:	89 2b       	or	r24, r25
     532:	09 f4       	brne	.+2      	; 0x536 <ADC_init+0x8>
     534:	3d c0       	rjmp	.+122    	; 0x5b0 <ADC_init+0x82>
     536:	80 81       	ld	r24, Z
     538:	98 2f       	mov	r25, r24
     53a:	97 70       	andi	r25, 0x07	; 7
     53c:	d9 f1       	breq	.+118    	; 0x5b4 <ADC_init+0x86>
     53e:	88 71       	andi	r24, 0x18	; 24
     540:	21 f0       	breq	.+8      	; 0x54a <ADC_init+0x1c>
     542:	88 30       	cpi	r24, 0x08	; 8
     544:	11 f0       	breq	.+4      	; 0x54a <ADC_init+0x1c>
     546:	80 31       	cpi	r24, 0x10	; 16
     548:	b9 f5       	brne	.+110    	; 0x5b8 <ADC_init+0x8a>
     54a:	86 b1       	in	r24, 0x06	; 6
     54c:	8f 77       	andi	r24, 0x7F	; 127
     54e:	86 b9       	out	0x06, r24	; 6
     550:	80 81       	ld	r24, Z
     552:	98 2f       	mov	r25, r24
     554:	97 70       	andi	r25, 0x07	; 7
     556:	86 b1       	in	r24, 0x06	; 6
     558:	88 7f       	andi	r24, 0xF8	; 248
     55a:	89 2b       	or	r24, r25
     55c:	86 b9       	out	0x06, r24	; 6
     55e:	80 81       	ld	r24, Z
     560:	86 95       	lsr	r24
     562:	86 95       	lsr	r24
     564:	86 95       	lsr	r24
     566:	98 2f       	mov	r25, r24
     568:	92 95       	swap	r25
     56a:	99 0f       	add	r25, r25
     56c:	99 0f       	add	r25, r25
     56e:	90 7c       	andi	r25, 0xC0	; 192
     570:	87 b1       	in	r24, 0x07	; 7
     572:	8f 73       	andi	r24, 0x3F	; 63
     574:	89 2b       	or	r24, r25
     576:	87 b9       	out	0x07, r24	; 7
     578:	87 b1       	in	r24, 0x07	; 7
     57a:	8f 7d       	andi	r24, 0xDF	; 223
     57c:	87 b9       	out	0x07, r24	; 7
     57e:	80 81       	ld	r24, Z
     580:	98 2f       	mov	r25, r24
     582:	90 72       	andi	r25, 0x20	; 32
     584:	85 ff       	sbrs	r24, 5
     586:	0a c0       	rjmp	.+20     	; 0x59c <ADC_init+0x6e>
     588:	0e 94 77 04 	call	0x8ee	; 0x8ee <GIE_ENABLE>
     58c:	86 b1       	in	r24, 0x06	; 6
     58e:	88 60       	ori	r24, 0x08	; 8
     590:	86 b9       	out	0x06, r24	; 6
     592:	86 b1       	in	r24, 0x06	; 6
     594:	80 68       	ori	r24, 0x80	; 128
     596:	86 b9       	out	0x06, r24	; 6
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	08 95       	ret
     59c:	91 11       	cpse	r25, r1
     59e:	0e c0       	rjmp	.+28     	; 0x5bc <ADC_init+0x8e>
     5a0:	86 b1       	in	r24, 0x06	; 6
     5a2:	87 7f       	andi	r24, 0xF7	; 247
     5a4:	86 b9       	out	0x06, r24	; 6
     5a6:	86 b1       	in	r24, 0x06	; 6
     5a8:	80 68       	ori	r24, 0x80	; 128
     5aa:	86 b9       	out	0x06, r24	; 6
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	08 95       	ret
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	08 95       	ret
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	08 95       	ret
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	08 95       	ret
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	08 95       	ret

000005c0 <ADC_enable>:
     5c0:	86 b1       	in	r24, 0x06	; 6
     5c2:	80 68       	ori	r24, 0x80	; 128
     5c4:	86 b9       	out	0x06, r24	; 6
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	08 95       	ret

000005ca <ADC_start_conversion_blocking>:
     5ca:	88 30       	cpi	r24, 0x08	; 8
     5cc:	b0 f4       	brcc	.+44     	; 0x5fa <ADC_start_conversion_blocking+0x30>
     5ce:	61 15       	cp	r22, r1
     5d0:	71 05       	cpc	r23, r1
     5d2:	a9 f0       	breq	.+42     	; 0x5fe <ADC_start_conversion_blocking+0x34>
     5d4:	36 99       	sbic	0x06, 6	; 6
     5d6:	fe cf       	rjmp	.-4      	; 0x5d4 <ADC_start_conversion_blocking+0xa>
     5d8:	8f 71       	andi	r24, 0x1F	; 31
     5da:	97 b1       	in	r25, 0x07	; 7
     5dc:	90 7e       	andi	r25, 0xE0	; 224
     5de:	89 2b       	or	r24, r25
     5e0:	87 b9       	out	0x07, r24	; 7
     5e2:	86 b1       	in	r24, 0x06	; 6
     5e4:	80 64       	ori	r24, 0x40	; 64
     5e6:	86 b9       	out	0x06, r24	; 6
     5e8:	36 99       	sbic	0x06, 6	; 6
     5ea:	fe cf       	rjmp	.-4      	; 0x5e8 <ADC_start_conversion_blocking+0x1e>
     5ec:	84 b1       	in	r24, 0x04	; 4
     5ee:	95 b1       	in	r25, 0x05	; 5
     5f0:	fb 01       	movw	r30, r22
     5f2:	91 83       	std	Z+1, r25	; 0x01
     5f4:	80 83       	st	Z, r24
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	08 95       	ret
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	08 95       	ret
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	08 95       	ret

00000602 <__vector_16>:

__attribute__((signal)) void __vector_16(void)
{
     602:	1f 92       	push	r1
     604:	0f 92       	push	r0
     606:	0f b6       	in	r0, 0x3f	; 63
     608:	0f 92       	push	r0
     60a:	11 24       	eor	r1, r1
     60c:	2f 93       	push	r18
     60e:	3f 93       	push	r19
     610:	4f 93       	push	r20
     612:	5f 93       	push	r21
     614:	6f 93       	push	r22
     616:	7f 93       	push	r23
     618:	8f 93       	push	r24
     61a:	9f 93       	push	r25
     61c:	af 93       	push	r26
     61e:	bf 93       	push	r27
     620:	ef 93       	push	r30
     622:	ff 93       	push	r31
	if(ADC_ISR_PTR)
     624:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <ADC_ISR_PTR>
     628:	f0 91 b5 00 	lds	r31, 0x00B5	; 0x8000b5 <ADC_ISR_PTR+0x1>
     62c:	30 97       	sbiw	r30, 0x00	; 0
     62e:	09 f0       	breq	.+2      	; 0x632 <__vector_16+0x30>
	{
		ADC_ISR_PTR();
     630:	09 95       	icall
	}
	
     632:	ff 91       	pop	r31
     634:	ef 91       	pop	r30
     636:	bf 91       	pop	r27
     638:	af 91       	pop	r26
     63a:	9f 91       	pop	r25
     63c:	8f 91       	pop	r24
     63e:	7f 91       	pop	r23
     640:	6f 91       	pop	r22
     642:	5f 91       	pop	r21
     644:	4f 91       	pop	r20
     646:	3f 91       	pop	r19
     648:	2f 91       	pop	r18
     64a:	0f 90       	pop	r0
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	0f 90       	pop	r0
     650:	1f 90       	pop	r1
     652:	18 95       	reti

00000654 <DIO_set_pin_direction>:
		Local_uint8ErrorState = 1;
	}
	
	return Local_uint8ErrorState;

}
     654:	68 30       	cpi	r22, 0x08	; 8
     656:	08 f0       	brcs	.+2      	; 0x65a <DIO_set_pin_direction+0x6>
     658:	78 c0       	rjmp	.+240    	; 0x74a <DIO_set_pin_direction+0xf6>
     65a:	41 11       	cpse	r20, r1
     65c:	3c c0       	rjmp	.+120    	; 0x6d6 <DIO_set_pin_direction+0x82>
     65e:	81 30       	cpi	r24, 0x01	; 1
     660:	99 f0       	breq	.+38     	; 0x688 <DIO_set_pin_direction+0x34>
     662:	28 f0       	brcs	.+10     	; 0x66e <DIO_set_pin_direction+0x1a>
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	e9 f0       	breq	.+58     	; 0x6a2 <DIO_set_pin_direction+0x4e>
     668:	83 30       	cpi	r24, 0x03	; 3
     66a:	41 f1       	breq	.+80     	; 0x6bc <DIO_set_pin_direction+0x68>
     66c:	70 c0       	rjmp	.+224    	; 0x74e <DIO_set_pin_direction+0xfa>
     66e:	2a b3       	in	r18, 0x1a	; 26
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	02 c0       	rjmp	.+4      	; 0x67a <DIO_set_pin_direction+0x26>
     676:	88 0f       	add	r24, r24
     678:	99 1f       	adc	r25, r25
     67a:	6a 95       	dec	r22
     67c:	e2 f7       	brpl	.-8      	; 0x676 <DIO_set_pin_direction+0x22>
     67e:	80 95       	com	r24
     680:	82 23       	and	r24, r18
     682:	8a bb       	out	0x1a, r24	; 26
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	08 95       	ret
     688:	27 b3       	in	r18, 0x17	; 23
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	02 c0       	rjmp	.+4      	; 0x694 <DIO_set_pin_direction+0x40>
     690:	88 0f       	add	r24, r24
     692:	99 1f       	adc	r25, r25
     694:	6a 95       	dec	r22
     696:	e2 f7       	brpl	.-8      	; 0x690 <DIO_set_pin_direction+0x3c>
     698:	80 95       	com	r24
     69a:	82 23       	and	r24, r18
     69c:	87 bb       	out	0x17, r24	; 23
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	08 95       	ret
     6a2:	24 b3       	in	r18, 0x14	; 20
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	02 c0       	rjmp	.+4      	; 0x6ae <DIO_set_pin_direction+0x5a>
     6aa:	88 0f       	add	r24, r24
     6ac:	99 1f       	adc	r25, r25
     6ae:	6a 95       	dec	r22
     6b0:	e2 f7       	brpl	.-8      	; 0x6aa <DIO_set_pin_direction+0x56>
     6b2:	80 95       	com	r24
     6b4:	82 23       	and	r24, r18
     6b6:	84 bb       	out	0x14, r24	; 20
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	08 95       	ret
     6bc:	21 b3       	in	r18, 0x11	; 17
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <DIO_set_pin_direction+0x74>
     6c4:	88 0f       	add	r24, r24
     6c6:	99 1f       	adc	r25, r25
     6c8:	6a 95       	dec	r22
     6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <DIO_set_pin_direction+0x70>
     6cc:	80 95       	com	r24
     6ce:	82 23       	and	r24, r18
     6d0:	81 bb       	out	0x11, r24	; 17
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	08 95       	ret
     6d6:	41 30       	cpi	r20, 0x01	; 1
     6d8:	e1 f5       	brne	.+120    	; 0x752 <DIO_set_pin_direction+0xfe>
     6da:	81 30       	cpi	r24, 0x01	; 1
     6dc:	91 f0       	breq	.+36     	; 0x702 <DIO_set_pin_direction+0xae>
     6de:	28 f0       	brcs	.+10     	; 0x6ea <DIO_set_pin_direction+0x96>
     6e0:	82 30       	cpi	r24, 0x02	; 2
     6e2:	d9 f0       	breq	.+54     	; 0x71a <DIO_set_pin_direction+0xc6>
     6e4:	83 30       	cpi	r24, 0x03	; 3
     6e6:	29 f1       	breq	.+74     	; 0x732 <DIO_set_pin_direction+0xde>
     6e8:	36 c0       	rjmp	.+108    	; 0x756 <DIO_set_pin_direction+0x102>
     6ea:	2a b3       	in	r18, 0x1a	; 26
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <DIO_set_pin_direction+0xa2>
     6f2:	88 0f       	add	r24, r24
     6f4:	99 1f       	adc	r25, r25
     6f6:	6a 95       	dec	r22
     6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <DIO_set_pin_direction+0x9e>
     6fa:	82 2b       	or	r24, r18
     6fc:	8a bb       	out	0x1a, r24	; 26
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	08 95       	ret
     702:	27 b3       	in	r18, 0x17	; 23
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	02 c0       	rjmp	.+4      	; 0x70e <DIO_set_pin_direction+0xba>
     70a:	88 0f       	add	r24, r24
     70c:	99 1f       	adc	r25, r25
     70e:	6a 95       	dec	r22
     710:	e2 f7       	brpl	.-8      	; 0x70a <DIO_set_pin_direction+0xb6>
     712:	82 2b       	or	r24, r18
     714:	87 bb       	out	0x17, r24	; 23
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	08 95       	ret
     71a:	24 b3       	in	r18, 0x14	; 20
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	02 c0       	rjmp	.+4      	; 0x726 <DIO_set_pin_direction+0xd2>
     722:	88 0f       	add	r24, r24
     724:	99 1f       	adc	r25, r25
     726:	6a 95       	dec	r22
     728:	e2 f7       	brpl	.-8      	; 0x722 <DIO_set_pin_direction+0xce>
     72a:	82 2b       	or	r24, r18
     72c:	84 bb       	out	0x14, r24	; 20
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	08 95       	ret
     732:	21 b3       	in	r18, 0x11	; 17
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	02 c0       	rjmp	.+4      	; 0x73e <DIO_set_pin_direction+0xea>
     73a:	88 0f       	add	r24, r24
     73c:	99 1f       	adc	r25, r25
     73e:	6a 95       	dec	r22
     740:	e2 f7       	brpl	.-8      	; 0x73a <DIO_set_pin_direction+0xe6>
     742:	82 2b       	or	r24, r18
     744:	81 bb       	out	0x11, r24	; 17
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	08 95       	ret
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	08 95       	ret
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	08 95       	ret
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	08 95       	ret
     756:	81 e0       	ldi	r24, 0x01	; 1
     758:	08 95       	ret

0000075a <DIO_set_pin_logic>:
     75a:	68 30       	cpi	r22, 0x08	; 8
     75c:	08 f0       	brcs	.+2      	; 0x760 <DIO_set_pin_logic+0x6>
     75e:	78 c0       	rjmp	.+240    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
     760:	41 11       	cpse	r20, r1
     762:	3c c0       	rjmp	.+120    	; 0x7dc <DIO_set_pin_logic+0x82>
     764:	81 30       	cpi	r24, 0x01	; 1
     766:	99 f0       	breq	.+38     	; 0x78e <DIO_set_pin_logic+0x34>
     768:	28 f0       	brcs	.+10     	; 0x774 <DIO_set_pin_logic+0x1a>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	e9 f0       	breq	.+58     	; 0x7a8 <DIO_set_pin_logic+0x4e>
     76e:	83 30       	cpi	r24, 0x03	; 3
     770:	41 f1       	breq	.+80     	; 0x7c2 <DIO_set_pin_logic+0x68>
     772:	70 c0       	rjmp	.+224    	; 0x854 <__DATA_REGION_LENGTH__+0x54>
     774:	2b b3       	in	r18, 0x1b	; 27
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	02 c0       	rjmp	.+4      	; 0x780 <DIO_set_pin_logic+0x26>
     77c:	88 0f       	add	r24, r24
     77e:	99 1f       	adc	r25, r25
     780:	6a 95       	dec	r22
     782:	e2 f7       	brpl	.-8      	; 0x77c <DIO_set_pin_logic+0x22>
     784:	80 95       	com	r24
     786:	82 23       	and	r24, r18
     788:	8b bb       	out	0x1b, r24	; 27
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	08 95       	ret
     78e:	28 b3       	in	r18, 0x18	; 24
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	02 c0       	rjmp	.+4      	; 0x79a <DIO_set_pin_logic+0x40>
     796:	88 0f       	add	r24, r24
     798:	99 1f       	adc	r25, r25
     79a:	6a 95       	dec	r22
     79c:	e2 f7       	brpl	.-8      	; 0x796 <DIO_set_pin_logic+0x3c>
     79e:	80 95       	com	r24
     7a0:	82 23       	and	r24, r18
     7a2:	88 bb       	out	0x18, r24	; 24
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	08 95       	ret
     7a8:	25 b3       	in	r18, 0x15	; 21
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <DIO_set_pin_logic+0x5a>
     7b0:	88 0f       	add	r24, r24
     7b2:	99 1f       	adc	r25, r25
     7b4:	6a 95       	dec	r22
     7b6:	e2 f7       	brpl	.-8      	; 0x7b0 <DIO_set_pin_logic+0x56>
     7b8:	80 95       	com	r24
     7ba:	82 23       	and	r24, r18
     7bc:	85 bb       	out	0x15, r24	; 21
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	08 95       	ret
     7c2:	22 b3       	in	r18, 0x12	; 18
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	02 c0       	rjmp	.+4      	; 0x7ce <DIO_set_pin_logic+0x74>
     7ca:	88 0f       	add	r24, r24
     7cc:	99 1f       	adc	r25, r25
     7ce:	6a 95       	dec	r22
     7d0:	e2 f7       	brpl	.-8      	; 0x7ca <DIO_set_pin_logic+0x70>
     7d2:	80 95       	com	r24
     7d4:	82 23       	and	r24, r18
     7d6:	82 bb       	out	0x12, r24	; 18
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	08 95       	ret
     7dc:	41 30       	cpi	r20, 0x01	; 1
     7de:	e1 f5       	brne	.+120    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     7e0:	81 30       	cpi	r24, 0x01	; 1
     7e2:	91 f0       	breq	.+36     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     7e4:	28 f0       	brcs	.+10     	; 0x7f0 <DIO_set_pin_logic+0x96>
     7e6:	82 30       	cpi	r24, 0x02	; 2
     7e8:	d9 f0       	breq	.+54     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     7ea:	83 30       	cpi	r24, 0x03	; 3
     7ec:	29 f1       	breq	.+74     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     7ee:	36 c0       	rjmp	.+108    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
     7f0:	2b b3       	in	r18, 0x1b	; 27
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	02 c0       	rjmp	.+4      	; 0x7fc <DIO_set_pin_logic+0xa2>
     7f8:	88 0f       	add	r24, r24
     7fa:	99 1f       	adc	r25, r25
     7fc:	6a 95       	dec	r22
     7fe:	e2 f7       	brpl	.-8      	; 0x7f8 <DIO_set_pin_logic+0x9e>
     800:	82 2b       	or	r24, r18
     802:	8b bb       	out	0x1b, r24	; 27
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	08 95       	ret
     808:	28 b3       	in	r18, 0x18	; 24
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	02 c0       	rjmp	.+4      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     810:	88 0f       	add	r24, r24
     812:	99 1f       	adc	r25, r25
     814:	6a 95       	dec	r22
     816:	e2 f7       	brpl	.-8      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     818:	82 2b       	or	r24, r18
     81a:	88 bb       	out	0x18, r24	; 24
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	08 95       	ret
     820:	25 b3       	in	r18, 0x15	; 21
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	02 c0       	rjmp	.+4      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     828:	88 0f       	add	r24, r24
     82a:	99 1f       	adc	r25, r25
     82c:	6a 95       	dec	r22
     82e:	e2 f7       	brpl	.-8      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     830:	82 2b       	or	r24, r18
     832:	85 bb       	out	0x15, r24	; 21
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	08 95       	ret
     838:	22 b3       	in	r18, 0x12	; 18
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	02 c0       	rjmp	.+4      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     840:	88 0f       	add	r24, r24
     842:	99 1f       	adc	r25, r25
     844:	6a 95       	dec	r22
     846:	e2 f7       	brpl	.-8      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     848:	82 2b       	or	r24, r18
     84a:	82 bb       	out	0x12, r24	; 18
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	08 95       	ret
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	08 95       	ret
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	08 95       	ret
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	08 95       	ret
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	08 95       	ret

00000860 <DIO_read_pin_logic>:

STD_RETURN_TYPE DIO_read_pin_logic(uint8 Copy_uint8Port, uint8 Copy_uint8Pin,uint8 *logic)
{
	STD_RETURN_TYPE ret=E_OK;
	if((NULL==logic)||(Copy_uint8Pin > DIO_uint8PIN7)||(Copy_uint8Port>DIO_uint8PORTD))
     860:	41 15       	cp	r20, r1
     862:	51 05       	cpc	r21, r1
     864:	e1 f1       	breq	.+120    	; 0x8de <DIO_read_pin_logic+0x7e>
     866:	68 30       	cpi	r22, 0x08	; 8
     868:	e0 f5       	brcc	.+120    	; 0x8e2 <DIO_read_pin_logic+0x82>
     86a:	84 30       	cpi	r24, 0x04	; 4
     86c:	e0 f5       	brcc	.+120    	; 0x8e6 <DIO_read_pin_logic+0x86>
	{
		ret=E_NOK;
	}
	else
	{
		if(DIO_uint8PORTA==Copy_uint8Port)
     86e:	81 11       	cpse	r24, r1
     870:	0c c0       	rjmp	.+24     	; 0x88a <DIO_read_pin_logic+0x2a>
		{
			*logic=GET_BIT(PINA,Copy_uint8Pin);
     872:	89 b3       	in	r24, 0x19	; 25
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	02 c0       	rjmp	.+4      	; 0x87c <DIO_read_pin_logic+0x1c>
     878:	95 95       	asr	r25
     87a:	87 95       	ror	r24
     87c:	6a 95       	dec	r22
     87e:	e2 f7       	brpl	.-8      	; 0x878 <DIO_read_pin_logic+0x18>
     880:	81 70       	andi	r24, 0x01	; 1
     882:	fa 01       	movw	r30, r20
     884:	80 83       	st	Z, r24

}

STD_RETURN_TYPE DIO_read_pin_logic(uint8 Copy_uint8Port, uint8 Copy_uint8Pin,uint8 *logic)
{
	STD_RETURN_TYPE ret=E_OK;
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	08 95       	ret
	{
		if(DIO_uint8PORTA==Copy_uint8Port)
		{
			*logic=GET_BIT(PINA,Copy_uint8Pin);
		}
		else if(DIO_uint8PORTB==Copy_uint8Port)
     88a:	81 30       	cpi	r24, 0x01	; 1
     88c:	61 f4       	brne	.+24     	; 0x8a6 <DIO_read_pin_logic+0x46>
		{
			*logic=GET_BIT(PINB,Copy_uint8Pin);
     88e:	86 b3       	in	r24, 0x16	; 22
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	02 c0       	rjmp	.+4      	; 0x898 <DIO_read_pin_logic+0x38>
     894:	95 95       	asr	r25
     896:	87 95       	ror	r24
     898:	6a 95       	dec	r22
     89a:	e2 f7       	brpl	.-8      	; 0x894 <DIO_read_pin_logic+0x34>
     89c:	81 70       	andi	r24, 0x01	; 1
     89e:	fa 01       	movw	r30, r20
     8a0:	80 83       	st	Z, r24

}

STD_RETURN_TYPE DIO_read_pin_logic(uint8 Copy_uint8Port, uint8 Copy_uint8Pin,uint8 *logic)
{
	STD_RETURN_TYPE ret=E_OK;
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	08 95       	ret
		}
		else if(DIO_uint8PORTB==Copy_uint8Port)
		{
			*logic=GET_BIT(PINB,Copy_uint8Pin);
		}
		else if(DIO_uint8PORTC==Copy_uint8Port)
     8a6:	82 30       	cpi	r24, 0x02	; 2
     8a8:	61 f4       	brne	.+24     	; 0x8c2 <DIO_read_pin_logic+0x62>
		{
			*logic=GET_BIT(PINC,Copy_uint8Pin);
     8aa:	83 b3       	in	r24, 0x13	; 19
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <DIO_read_pin_logic+0x54>
     8b0:	95 95       	asr	r25
     8b2:	87 95       	ror	r24
     8b4:	6a 95       	dec	r22
     8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <DIO_read_pin_logic+0x50>
     8b8:	81 70       	andi	r24, 0x01	; 1
     8ba:	fa 01       	movw	r30, r20
     8bc:	80 83       	st	Z, r24

}

STD_RETURN_TYPE DIO_read_pin_logic(uint8 Copy_uint8Port, uint8 Copy_uint8Pin,uint8 *logic)
{
	STD_RETURN_TYPE ret=E_OK;
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	08 95       	ret
		}
		else if(DIO_uint8PORTC==Copy_uint8Port)
		{
			*logic=GET_BIT(PINC,Copy_uint8Pin);
		}
		else if(DIO_uint8PORTD==Copy_uint8Port)
     8c2:	83 30       	cpi	r24, 0x03	; 3
     8c4:	91 f4       	brne	.+36     	; 0x8ea <DIO_read_pin_logic+0x8a>
		{
			*logic=GET_BIT(PIND,Copy_uint8Pin);
     8c6:	80 b3       	in	r24, 0x10	; 16
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <DIO_read_pin_logic+0x70>
     8cc:	95 95       	asr	r25
     8ce:	87 95       	ror	r24
     8d0:	6a 95       	dec	r22
     8d2:	e2 f7       	brpl	.-8      	; 0x8cc <DIO_read_pin_logic+0x6c>
     8d4:	81 70       	andi	r24, 0x01	; 1
     8d6:	fa 01       	movw	r30, r20
     8d8:	80 83       	st	Z, r24

}

STD_RETURN_TYPE DIO_read_pin_logic(uint8 Copy_uint8Port, uint8 Copy_uint8Pin,uint8 *logic)
{
	STD_RETURN_TYPE ret=E_OK;
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	08 95       	ret
	if((NULL==logic)||(Copy_uint8Pin > DIO_uint8PIN7)||(Copy_uint8Port>DIO_uint8PORTD))
	{
		ret=E_NOK;
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	08 95       	ret
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	08 95       	ret
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	08 95       	ret
		{
			*logic=GET_BIT(PIND,Copy_uint8Pin);
		}
		else
		{
			ret=E_NOK;
     8ea:	80 e0       	ldi	r24, 0x00	; 0
		}	
	}
	return ret;
}
     8ec:	08 95       	ret

000008ee <GIE_ENABLE>:
#include "GIE_INTERFACE.h"
#include "../MCAL_STD_TYPES.h"

void GIE_ENABLE()        //Enable GIE
{
SET_BIT(SREG,I);
     8ee:	8f b7       	in	r24, 0x3f	; 63
     8f0:	80 68       	ori	r24, 0x80	; 128
     8f2:	8f bf       	out	0x3f, r24	; 63
     8f4:	08 95       	ret

000008f6 <TIMER0_confiG_file_init>:
STD_RETURN_TYPE TIMER0_write_value(uint8 value)
{
	STD_RETURN_TYPE ret=E_OK;
	TIMER0_WRITE_VALUE(value);
	return ret;
}
     8f6:	83 b7       	in	r24, 0x33	; 51
     8f8:	80 64       	ori	r24, 0x40	; 64
     8fa:	83 bf       	out	0x33, r24	; 51
     8fc:	83 b7       	in	r24, 0x33	; 51
     8fe:	88 60       	ori	r24, 0x08	; 8
     900:	83 bf       	out	0x33, r24	; 51
     902:	83 b7       	in	r24, 0x33	; 51
     904:	8f 7c       	andi	r24, 0xCF	; 207
     906:	80 62       	ori	r24, 0x20	; 32
     908:	83 bf       	out	0x33, r24	; 51
     90a:	83 b7       	in	r24, 0x33	; 51
     90c:	88 7f       	andi	r24, 0xF8	; 248
     90e:	82 60       	ori	r24, 0x02	; 2
     910:	83 bf       	out	0x33, r24	; 51
     912:	89 b7       	in	r24, 0x39	; 57
     914:	82 60       	ori	r24, 0x02	; 2
     916:	89 bf       	out	0x39, r24	; 57
     918:	0e 94 77 04 	call	0x8ee	; 0x8ee <GIE_ENABLE>
     91c:	89 b7       	in	r24, 0x39	; 57
     91e:	81 60       	ori	r24, 0x01	; 1
     920:	89 bf       	out	0x39, r24	; 57
     922:	0e 94 77 04 	call	0x8ee	; 0x8ee <GIE_ENABLE>
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	08 95       	ret

0000092a <TIMER0_set_duty_cycle>:
STD_RETURN_TYPE TIMER0_set_duty_cycle(uint8 duty_cycle)
{
	STD_RETURN_TYPE ret=E_OK;
	#if TIMER0_COMPARE_MODE==TIMER0_COMPARE_OUTPUT_PWM_CLEAR_ON_COMPARE_SET_ON_TOP
	TIMER0_WRITE_COMPARE_VALUE((uint8)(255*((float)duty_cycle/100.00)));
     92a:	68 2f       	mov	r22, r24
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	0e 94 de 06 	call	0xdbc	; 0xdbc <__floatunsisf>
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	48 ec       	ldi	r20, 0xC8	; 200
     93c:	52 e4       	ldi	r21, 0x42	; 66
     93e:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__divsf3>
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	4f e7       	ldi	r20, 0x7F	; 127
     948:	53 e4       	ldi	r21, 0x43	; 67
     94a:	0e 94 6c 07 	call	0xed8	; 0xed8 <__mulsf3>
     94e:	0e 94 af 06 	call	0xd5e	; 0xd5e <__fixunssfsi>
     952:	6c bf       	out	0x3c, r22	; 60
	ret=E_NOK;
	#endif
	
	
	return ret;
}
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	08 95       	ret

00000958 <__vector_11>:

__attribute__((signal)) void __vector_11(void)
{
     958:	1f 92       	push	r1
     95a:	0f 92       	push	r0
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	0f 92       	push	r0
     960:	11 24       	eor	r1, r1
     962:	2f 93       	push	r18
     964:	3f 93       	push	r19
     966:	4f 93       	push	r20
     968:	5f 93       	push	r21
     96a:	6f 93       	push	r22
     96c:	7f 93       	push	r23
     96e:	8f 93       	push	r24
     970:	9f 93       	push	r25
     972:	af 93       	push	r26
     974:	bf 93       	push	r27
     976:	ef 93       	push	r30
     978:	ff 93       	push	r31
	if(TIMER0_compare_ISR_ptr)
     97a:	e0 91 b6 00 	lds	r30, 0x00B6	; 0x8000b6 <TIMER0_compare_ISR_ptr>
     97e:	f0 91 b7 00 	lds	r31, 0x00B7	; 0x8000b7 <TIMER0_compare_ISR_ptr+0x1>
     982:	30 97       	sbiw	r30, 0x00	; 0
     984:	09 f0       	breq	.+2      	; 0x988 <__vector_11+0x30>
	{
		TIMER0_compare_ISR_ptr();
     986:	09 95       	icall
	}
	TIMER0_INTERRUPT_COMPARE_CLEAR_FLAG();
     988:	88 b7       	in	r24, 0x38	; 56
     98a:	82 60       	ori	r24, 0x02	; 2
     98c:	88 bf       	out	0x38, r24	; 56
}
     98e:	ff 91       	pop	r31
     990:	ef 91       	pop	r30
     992:	bf 91       	pop	r27
     994:	af 91       	pop	r26
     996:	9f 91       	pop	r25
     998:	8f 91       	pop	r24
     99a:	7f 91       	pop	r23
     99c:	6f 91       	pop	r22
     99e:	5f 91       	pop	r21
     9a0:	4f 91       	pop	r20
     9a2:	3f 91       	pop	r19
     9a4:	2f 91       	pop	r18
     9a6:	0f 90       	pop	r0
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	0f 90       	pop	r0
     9ac:	1f 90       	pop	r1
     9ae:	18 95       	reti

000009b0 <__vector_12>:

__attribute__((signal)) void __vector_12(void)
{
     9b0:	1f 92       	push	r1
     9b2:	0f 92       	push	r0
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	0f 92       	push	r0
     9b8:	11 24       	eor	r1, r1
     9ba:	2f 93       	push	r18
     9bc:	3f 93       	push	r19
     9be:	4f 93       	push	r20
     9c0:	5f 93       	push	r21
     9c2:	6f 93       	push	r22
     9c4:	7f 93       	push	r23
     9c6:	8f 93       	push	r24
     9c8:	9f 93       	push	r25
     9ca:	af 93       	push	r26
     9cc:	bf 93       	push	r27
     9ce:	ef 93       	push	r30
     9d0:	ff 93       	push	r31
	if(TIMER0_overflow_ISR_ptr)
     9d2:	e0 91 b8 00 	lds	r30, 0x00B8	; 0x8000b8 <TIMER0_overflow_ISR_ptr>
     9d6:	f0 91 b9 00 	lds	r31, 0x00B9	; 0x8000b9 <TIMER0_overflow_ISR_ptr+0x1>
     9da:	30 97       	sbiw	r30, 0x00	; 0
     9dc:	09 f0       	breq	.+2      	; 0x9e0 <__vector_12+0x30>
	{
		TIMER0_overflow_ISR_ptr();
     9de:	09 95       	icall
	}
	TIMER0_INTERRUPT_OVERFLOW_CLEAR_FLAG();
     9e0:	88 b7       	in	r24, 0x38	; 56
     9e2:	81 60       	ori	r24, 0x01	; 1
     9e4:	88 bf       	out	0x38, r24	; 56
     9e6:	ff 91       	pop	r31
     9e8:	ef 91       	pop	r30
     9ea:	bf 91       	pop	r27
     9ec:	af 91       	pop	r26
     9ee:	9f 91       	pop	r25
     9f0:	8f 91       	pop	r24
     9f2:	7f 91       	pop	r23
     9f4:	6f 91       	pop	r22
     9f6:	5f 91       	pop	r21
     9f8:	4f 91       	pop	r20
     9fa:	3f 91       	pop	r19
     9fc:	2f 91       	pop	r18
     9fe:	0f 90       	pop	r0
     a00:	0f be       	out	0x3f, r0	; 63
     a02:	0f 90       	pop	r0
     a04:	1f 90       	pop	r1
     a06:	18 95       	reti

00000a08 <__vector_7>:
}

/* ISR vectors (platform-specific names) */

void __vector_7(void) __attribute__((signal));
void __vector_7(void) { if (Timer1_OVF_Callback) Timer1_OVF_Callback(); CLEAR_BIT(TIFR,TIFR_TOV1_BIT); }
     a08:	1f 92       	push	r1
     a0a:	0f 92       	push	r0
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	0f 92       	push	r0
     a10:	11 24       	eor	r1, r1
     a12:	2f 93       	push	r18
     a14:	3f 93       	push	r19
     a16:	4f 93       	push	r20
     a18:	5f 93       	push	r21
     a1a:	6f 93       	push	r22
     a1c:	7f 93       	push	r23
     a1e:	8f 93       	push	r24
     a20:	9f 93       	push	r25
     a22:	af 93       	push	r26
     a24:	bf 93       	push	r27
     a26:	ef 93       	push	r30
     a28:	ff 93       	push	r31
     a2a:	e0 91 c0 00 	lds	r30, 0x00C0	; 0x8000c0 <Timer1_OVF_Callback>
     a2e:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <Timer1_OVF_Callback+0x1>
     a32:	30 97       	sbiw	r30, 0x00	; 0
     a34:	09 f0       	breq	.+2      	; 0xa38 <__vector_7+0x30>
     a36:	09 95       	icall
     a38:	88 b7       	in	r24, 0x38	; 56
     a3a:	8b 7f       	andi	r24, 0xFB	; 251
     a3c:	88 bf       	out	0x38, r24	; 56
     a3e:	ff 91       	pop	r31
     a40:	ef 91       	pop	r30
     a42:	bf 91       	pop	r27
     a44:	af 91       	pop	r26
     a46:	9f 91       	pop	r25
     a48:	8f 91       	pop	r24
     a4a:	7f 91       	pop	r23
     a4c:	6f 91       	pop	r22
     a4e:	5f 91       	pop	r21
     a50:	4f 91       	pop	r20
     a52:	3f 91       	pop	r19
     a54:	2f 91       	pop	r18
     a56:	0f 90       	pop	r0
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	0f 90       	pop	r0
     a5c:	1f 90       	pop	r1
     a5e:	18 95       	reti

00000a60 <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void) { if (Timer1_OCA_Callback) Timer1_OCA_Callback(); CLEAR_BIT(TIFR,TIFR_OCF1A_BIT); }
     a60:	1f 92       	push	r1
     a62:	0f 92       	push	r0
     a64:	0f b6       	in	r0, 0x3f	; 63
     a66:	0f 92       	push	r0
     a68:	11 24       	eor	r1, r1
     a6a:	2f 93       	push	r18
     a6c:	3f 93       	push	r19
     a6e:	4f 93       	push	r20
     a70:	5f 93       	push	r21
     a72:	6f 93       	push	r22
     a74:	7f 93       	push	r23
     a76:	8f 93       	push	r24
     a78:	9f 93       	push	r25
     a7a:	af 93       	push	r26
     a7c:	bf 93       	push	r27
     a7e:	ef 93       	push	r30
     a80:	ff 93       	push	r31
     a82:	e0 91 be 00 	lds	r30, 0x00BE	; 0x8000be <Timer1_OCA_Callback>
     a86:	f0 91 bf 00 	lds	r31, 0x00BF	; 0x8000bf <Timer1_OCA_Callback+0x1>
     a8a:	30 97       	sbiw	r30, 0x00	; 0
     a8c:	09 f0       	breq	.+2      	; 0xa90 <__vector_8+0x30>
     a8e:	09 95       	icall
     a90:	88 b7       	in	r24, 0x38	; 56
     a92:	8f 7e       	andi	r24, 0xEF	; 239
     a94:	88 bf       	out	0x38, r24	; 56
     a96:	ff 91       	pop	r31
     a98:	ef 91       	pop	r30
     a9a:	bf 91       	pop	r27
     a9c:	af 91       	pop	r26
     a9e:	9f 91       	pop	r25
     aa0:	8f 91       	pop	r24
     aa2:	7f 91       	pop	r23
     aa4:	6f 91       	pop	r22
     aa6:	5f 91       	pop	r21
     aa8:	4f 91       	pop	r20
     aaa:	3f 91       	pop	r19
     aac:	2f 91       	pop	r18
     aae:	0f 90       	pop	r0
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	0f 90       	pop	r0
     ab4:	1f 90       	pop	r1
     ab6:	18 95       	reti

00000ab8 <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void) { if (Timer1_OCB_Callback) Timer1_OCB_Callback(); CLEAR_BIT(TIFR,TIFR_OCF1B_BIT); }
     ab8:	1f 92       	push	r1
     aba:	0f 92       	push	r0
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	0f 92       	push	r0
     ac0:	11 24       	eor	r1, r1
     ac2:	2f 93       	push	r18
     ac4:	3f 93       	push	r19
     ac6:	4f 93       	push	r20
     ac8:	5f 93       	push	r21
     aca:	6f 93       	push	r22
     acc:	7f 93       	push	r23
     ace:	8f 93       	push	r24
     ad0:	9f 93       	push	r25
     ad2:	af 93       	push	r26
     ad4:	bf 93       	push	r27
     ad6:	ef 93       	push	r30
     ad8:	ff 93       	push	r31
     ada:	e0 91 bc 00 	lds	r30, 0x00BC	; 0x8000bc <Timer1_OCB_Callback>
     ade:	f0 91 bd 00 	lds	r31, 0x00BD	; 0x8000bd <Timer1_OCB_Callback+0x1>
     ae2:	30 97       	sbiw	r30, 0x00	; 0
     ae4:	09 f0       	breq	.+2      	; 0xae8 <__vector_9+0x30>
     ae6:	09 95       	icall
     ae8:	88 b7       	in	r24, 0x38	; 56
     aea:	87 7f       	andi	r24, 0xF7	; 247
     aec:	88 bf       	out	0x38, r24	; 56
     aee:	ff 91       	pop	r31
     af0:	ef 91       	pop	r30
     af2:	bf 91       	pop	r27
     af4:	af 91       	pop	r26
     af6:	9f 91       	pop	r25
     af8:	8f 91       	pop	r24
     afa:	7f 91       	pop	r23
     afc:	6f 91       	pop	r22
     afe:	5f 91       	pop	r21
     b00:	4f 91       	pop	r20
     b02:	3f 91       	pop	r19
     b04:	2f 91       	pop	r18
     b06:	0f 90       	pop	r0
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	0f 90       	pop	r0
     b0c:	1f 90       	pop	r1
     b0e:	18 95       	reti

00000b10 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void) { if (Timer1_ICU_Callback) Timer1_ICU_Callback(); CLEAR_BIT(TIFR,TIFR_ICF1_BIT); }
     b10:	1f 92       	push	r1
     b12:	0f 92       	push	r0
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	0f 92       	push	r0
     b18:	11 24       	eor	r1, r1
     b1a:	2f 93       	push	r18
     b1c:	3f 93       	push	r19
     b1e:	4f 93       	push	r20
     b20:	5f 93       	push	r21
     b22:	6f 93       	push	r22
     b24:	7f 93       	push	r23
     b26:	8f 93       	push	r24
     b28:	9f 93       	push	r25
     b2a:	af 93       	push	r26
     b2c:	bf 93       	push	r27
     b2e:	ef 93       	push	r30
     b30:	ff 93       	push	r31
     b32:	e0 91 ba 00 	lds	r30, 0x00BA	; 0x8000ba <Timer1_ICU_Callback>
     b36:	f0 91 bb 00 	lds	r31, 0x00BB	; 0x8000bb <Timer1_ICU_Callback+0x1>
     b3a:	30 97       	sbiw	r30, 0x00	; 0
     b3c:	09 f0       	breq	.+2      	; 0xb40 <__vector_6+0x30>
     b3e:	09 95       	icall
     b40:	88 b7       	in	r24, 0x38	; 56
     b42:	8f 7d       	andi	r24, 0xDF	; 223
     b44:	88 bf       	out	0x38, r24	; 56
     b46:	ff 91       	pop	r31
     b48:	ef 91       	pop	r30
     b4a:	bf 91       	pop	r27
     b4c:	af 91       	pop	r26
     b4e:	9f 91       	pop	r25
     b50:	8f 91       	pop	r24
     b52:	7f 91       	pop	r23
     b54:	6f 91       	pop	r22
     b56:	5f 91       	pop	r21
     b58:	4f 91       	pop	r20
     b5a:	3f 91       	pop	r19
     b5c:	2f 91       	pop	r18
     b5e:	0f 90       	pop	r0
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	0f 90       	pop	r0
     b64:	1f 90       	pop	r1
     b66:	18 95       	reti

00000b68 <__vector_4>:
	
	return ret;
}

__attribute__((signal)) void __vector_4(void)
{
     b68:	1f 92       	push	r1
     b6a:	0f 92       	push	r0
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	0f 92       	push	r0
     b70:	11 24       	eor	r1, r1
     b72:	2f 93       	push	r18
     b74:	3f 93       	push	r19
     b76:	4f 93       	push	r20
     b78:	5f 93       	push	r21
     b7a:	6f 93       	push	r22
     b7c:	7f 93       	push	r23
     b7e:	8f 93       	push	r24
     b80:	9f 93       	push	r25
     b82:	af 93       	push	r26
     b84:	bf 93       	push	r27
     b86:	ef 93       	push	r30
     b88:	ff 93       	push	r31
	if(TIMER2_compare_ISR_ptr)
     b8a:	e0 91 c2 00 	lds	r30, 0x00C2	; 0x8000c2 <TIMER2_compare_ISR_ptr>
     b8e:	f0 91 c3 00 	lds	r31, 0x00C3	; 0x8000c3 <TIMER2_compare_ISR_ptr+0x1>
     b92:	30 97       	sbiw	r30, 0x00	; 0
     b94:	09 f0       	breq	.+2      	; 0xb98 <__vector_4+0x30>
	{
		TIMER2_compare_ISR_ptr();
     b96:	09 95       	icall
	}
	TIMER2_INTERRUPT_COMPARE_CLEAR_FLAG();
     b98:	88 b7       	in	r24, 0x38	; 56
     b9a:	80 68       	ori	r24, 0x80	; 128
     b9c:	88 bf       	out	0x38, r24	; 56
}
     b9e:	ff 91       	pop	r31
     ba0:	ef 91       	pop	r30
     ba2:	bf 91       	pop	r27
     ba4:	af 91       	pop	r26
     ba6:	9f 91       	pop	r25
     ba8:	8f 91       	pop	r24
     baa:	7f 91       	pop	r23
     bac:	6f 91       	pop	r22
     bae:	5f 91       	pop	r21
     bb0:	4f 91       	pop	r20
     bb2:	3f 91       	pop	r19
     bb4:	2f 91       	pop	r18
     bb6:	0f 90       	pop	r0
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	0f 90       	pop	r0
     bbc:	1f 90       	pop	r1
     bbe:	18 95       	reti

00000bc0 <__vector_5>:

__attribute__((signal)) void __vector_5(void)
{
     bc0:	1f 92       	push	r1
     bc2:	0f 92       	push	r0
     bc4:	0f b6       	in	r0, 0x3f	; 63
     bc6:	0f 92       	push	r0
     bc8:	11 24       	eor	r1, r1
     bca:	2f 93       	push	r18
     bcc:	3f 93       	push	r19
     bce:	4f 93       	push	r20
     bd0:	5f 93       	push	r21
     bd2:	6f 93       	push	r22
     bd4:	7f 93       	push	r23
     bd6:	8f 93       	push	r24
     bd8:	9f 93       	push	r25
     bda:	af 93       	push	r26
     bdc:	bf 93       	push	r27
     bde:	ef 93       	push	r30
     be0:	ff 93       	push	r31
	if(TIMER2_overflow_ISR_ptr)
     be2:	e0 91 c4 00 	lds	r30, 0x00C4	; 0x8000c4 <TIMER2_overflow_ISR_ptr>
     be6:	f0 91 c5 00 	lds	r31, 0x00C5	; 0x8000c5 <TIMER2_overflow_ISR_ptr+0x1>
     bea:	30 97       	sbiw	r30, 0x00	; 0
     bec:	09 f0       	breq	.+2      	; 0xbf0 <__vector_5+0x30>
	{
		TIMER2_overflow_ISR_ptr();
     bee:	09 95       	icall
	}
	TIMER2_INTERRUPT_OVERFLOW_CLEAR_FLAG();
     bf0:	88 b7       	in	r24, 0x38	; 56
     bf2:	80 64       	ori	r24, 0x40	; 64
     bf4:	88 bf       	out	0x38, r24	; 56
     bf6:	ff 91       	pop	r31
     bf8:	ef 91       	pop	r30
     bfa:	bf 91       	pop	r27
     bfc:	af 91       	pop	r26
     bfe:	9f 91       	pop	r25
     c00:	8f 91       	pop	r24
     c02:	7f 91       	pop	r23
     c04:	6f 91       	pop	r22
     c06:	5f 91       	pop	r21
     c08:	4f 91       	pop	r20
     c0a:	3f 91       	pop	r19
     c0c:	2f 91       	pop	r18
     c0e:	0f 90       	pop	r0
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	0f 90       	pop	r0
     c14:	1f 90       	pop	r1
     c16:	18 95       	reti

00000c18 <UART_INTI>:
UART_Baudrate_Error = GET_BIT(UCSRA,UCSRA_DOR);
if(UART_Baudrate_Error)
	return -1;
else 
	return 0;
}
     c18:	10 bc       	out	0x20, r1	; 32
     c1a:	83 e3       	ldi	r24, 0x33	; 51
     c1c:	89 b9       	out	0x09, r24	; 9
     c1e:	86 e8       	ldi	r24, 0x86	; 134
     c20:	80 bd       	out	0x20, r24	; 32
     c22:	88 e1       	ldi	r24, 0x18	; 24
     c24:	8a b9       	out	0x0a, r24	; 10
     c26:	08 95       	ret

00000c28 <UART_Send_Data_PolingMethod>:
     c28:	5d 9b       	sbis	0x0b, 5	; 11
     c2a:	fe cf       	rjmp	.-4      	; 0xc28 <UART_Send_Data_PolingMethod>
     c2c:	8c b9       	out	0x0c, r24	; 12
     c2e:	08 95       	ret

00000c30 <__vector_14>:


//sending interrupt
void __vector_14 (void) __attribute__((signal));
void __vector_14(void)
{
     c30:	1f 92       	push	r1
     c32:	0f 92       	push	r0
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	0f 92       	push	r0
     c38:	11 24       	eor	r1, r1
     c3a:	8f 93       	push	r24
UDR = sending_data;
     c3c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <sending_data>
     c40:	8c b9       	out	0x0c, r24	; 12
}
     c42:	8f 91       	pop	r24
     c44:	0f 90       	pop	r0
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	0f 90       	pop	r0
     c4a:	1f 90       	pop	r1
     c4c:	18 95       	reti

00000c4e <__vector_13>:

//receiving interrupt
void __vector_13 (void) __attribute__((signal));
void __vector_13(void)
{
     c4e:	1f 92       	push	r1
     c50:	0f 92       	push	r0
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	0f 92       	push	r0
     c56:	11 24       	eor	r1, r1
     c58:	8f 93       	push	r24
     c5a:	ef 93       	push	r30
     c5c:	ff 93       	push	r31
*(receiving_ptr) = UDR;
     c5e:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <receiving_ptr>
     c62:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <receiving_ptr+0x1>
     c66:	8c b1       	in	r24, 0x0c	; 12
     c68:	80 83       	st	Z, r24
     c6a:	ff 91       	pop	r31
     c6c:	ef 91       	pop	r30
     c6e:	8f 91       	pop	r24
     c70:	0f 90       	pop	r0
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	0f 90       	pop	r0
     c76:	1f 90       	pop	r1
     c78:	18 95       	reti

00000c7a <__divsf3>:
     c7a:	0e 94 51 06 	call	0xca2	; 0xca2 <__divsf3x>
     c7e:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__fp_round>
     c82:	0e 94 2b 07 	call	0xe56	; 0xe56 <__fp_pscB>
     c86:	58 f0       	brcs	.+22     	; 0xc9e <__divsf3+0x24>
     c88:	0e 94 24 07 	call	0xe48	; 0xe48 <__fp_pscA>
     c8c:	40 f0       	brcs	.+16     	; 0xc9e <__divsf3+0x24>
     c8e:	29 f4       	brne	.+10     	; 0xc9a <__divsf3+0x20>
     c90:	5f 3f       	cpi	r21, 0xFF	; 255
     c92:	29 f0       	breq	.+10     	; 0xc9e <__divsf3+0x24>
     c94:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <__fp_inf>
     c98:	51 11       	cpse	r21, r1
     c9a:	0c 94 66 07 	jmp	0xecc	; 0xecc <__fp_szero>
     c9e:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__fp_nan>

00000ca2 <__divsf3x>:
     ca2:	0e 94 43 07 	call	0xe86	; 0xe86 <__fp_split3>
     ca6:	68 f3       	brcs	.-38     	; 0xc82 <__divsf3+0x8>

00000ca8 <__divsf3_pse>:
     ca8:	99 23       	and	r25, r25
     caa:	b1 f3       	breq	.-20     	; 0xc98 <__divsf3+0x1e>
     cac:	55 23       	and	r21, r21
     cae:	91 f3       	breq	.-28     	; 0xc94 <__divsf3+0x1a>
     cb0:	95 1b       	sub	r25, r21
     cb2:	55 0b       	sbc	r21, r21
     cb4:	bb 27       	eor	r27, r27
     cb6:	aa 27       	eor	r26, r26
     cb8:	62 17       	cp	r22, r18
     cba:	73 07       	cpc	r23, r19
     cbc:	84 07       	cpc	r24, r20
     cbe:	38 f0       	brcs	.+14     	; 0xcce <__divsf3_pse+0x26>
     cc0:	9f 5f       	subi	r25, 0xFF	; 255
     cc2:	5f 4f       	sbci	r21, 0xFF	; 255
     cc4:	22 0f       	add	r18, r18
     cc6:	33 1f       	adc	r19, r19
     cc8:	44 1f       	adc	r20, r20
     cca:	aa 1f       	adc	r26, r26
     ccc:	a9 f3       	breq	.-22     	; 0xcb8 <__divsf3_pse+0x10>
     cce:	35 d0       	rcall	.+106    	; 0xd3a <__divsf3_pse+0x92>
     cd0:	0e 2e       	mov	r0, r30
     cd2:	3a f0       	brmi	.+14     	; 0xce2 <__divsf3_pse+0x3a>
     cd4:	e0 e8       	ldi	r30, 0x80	; 128
     cd6:	32 d0       	rcall	.+100    	; 0xd3c <__divsf3_pse+0x94>
     cd8:	91 50       	subi	r25, 0x01	; 1
     cda:	50 40       	sbci	r21, 0x00	; 0
     cdc:	e6 95       	lsr	r30
     cde:	00 1c       	adc	r0, r0
     ce0:	ca f7       	brpl	.-14     	; 0xcd4 <__divsf3_pse+0x2c>
     ce2:	2b d0       	rcall	.+86     	; 0xd3a <__divsf3_pse+0x92>
     ce4:	fe 2f       	mov	r31, r30
     ce6:	29 d0       	rcall	.+82     	; 0xd3a <__divsf3_pse+0x92>
     ce8:	66 0f       	add	r22, r22
     cea:	77 1f       	adc	r23, r23
     cec:	88 1f       	adc	r24, r24
     cee:	bb 1f       	adc	r27, r27
     cf0:	26 17       	cp	r18, r22
     cf2:	37 07       	cpc	r19, r23
     cf4:	48 07       	cpc	r20, r24
     cf6:	ab 07       	cpc	r26, r27
     cf8:	b0 e8       	ldi	r27, 0x80	; 128
     cfa:	09 f0       	breq	.+2      	; 0xcfe <__divsf3_pse+0x56>
     cfc:	bb 0b       	sbc	r27, r27
     cfe:	80 2d       	mov	r24, r0
     d00:	bf 01       	movw	r22, r30
     d02:	ff 27       	eor	r31, r31
     d04:	93 58       	subi	r25, 0x83	; 131
     d06:	5f 4f       	sbci	r21, 0xFF	; 255
     d08:	3a f0       	brmi	.+14     	; 0xd18 <__divsf3_pse+0x70>
     d0a:	9e 3f       	cpi	r25, 0xFE	; 254
     d0c:	51 05       	cpc	r21, r1
     d0e:	78 f0       	brcs	.+30     	; 0xd2e <__divsf3_pse+0x86>
     d10:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <__fp_inf>
     d14:	0c 94 66 07 	jmp	0xecc	; 0xecc <__fp_szero>
     d18:	5f 3f       	cpi	r21, 0xFF	; 255
     d1a:	e4 f3       	brlt	.-8      	; 0xd14 <__divsf3_pse+0x6c>
     d1c:	98 3e       	cpi	r25, 0xE8	; 232
     d1e:	d4 f3       	brlt	.-12     	; 0xd14 <__divsf3_pse+0x6c>
     d20:	86 95       	lsr	r24
     d22:	77 95       	ror	r23
     d24:	67 95       	ror	r22
     d26:	b7 95       	ror	r27
     d28:	f7 95       	ror	r31
     d2a:	9f 5f       	subi	r25, 0xFF	; 255
     d2c:	c9 f7       	brne	.-14     	; 0xd20 <__divsf3_pse+0x78>
     d2e:	88 0f       	add	r24, r24
     d30:	91 1d       	adc	r25, r1
     d32:	96 95       	lsr	r25
     d34:	87 95       	ror	r24
     d36:	97 f9       	bld	r25, 7
     d38:	08 95       	ret
     d3a:	e1 e0       	ldi	r30, 0x01	; 1
     d3c:	66 0f       	add	r22, r22
     d3e:	77 1f       	adc	r23, r23
     d40:	88 1f       	adc	r24, r24
     d42:	bb 1f       	adc	r27, r27
     d44:	62 17       	cp	r22, r18
     d46:	73 07       	cpc	r23, r19
     d48:	84 07       	cpc	r24, r20
     d4a:	ba 07       	cpc	r27, r26
     d4c:	20 f0       	brcs	.+8      	; 0xd56 <__divsf3_pse+0xae>
     d4e:	62 1b       	sub	r22, r18
     d50:	73 0b       	sbc	r23, r19
     d52:	84 0b       	sbc	r24, r20
     d54:	ba 0b       	sbc	r27, r26
     d56:	ee 1f       	adc	r30, r30
     d58:	88 f7       	brcc	.-30     	; 0xd3c <__divsf3_pse+0x94>
     d5a:	e0 95       	com	r30
     d5c:	08 95       	ret

00000d5e <__fixunssfsi>:
     d5e:	0e 94 4b 07 	call	0xe96	; 0xe96 <__fp_splitA>
     d62:	88 f0       	brcs	.+34     	; 0xd86 <__fixunssfsi+0x28>
     d64:	9f 57       	subi	r25, 0x7F	; 127
     d66:	98 f0       	brcs	.+38     	; 0xd8e <__fixunssfsi+0x30>
     d68:	b9 2f       	mov	r27, r25
     d6a:	99 27       	eor	r25, r25
     d6c:	b7 51       	subi	r27, 0x17	; 23
     d6e:	b0 f0       	brcs	.+44     	; 0xd9c <__fixunssfsi+0x3e>
     d70:	e1 f0       	breq	.+56     	; 0xdaa <__fixunssfsi+0x4c>
     d72:	66 0f       	add	r22, r22
     d74:	77 1f       	adc	r23, r23
     d76:	88 1f       	adc	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	1a f0       	brmi	.+6      	; 0xd82 <__fixunssfsi+0x24>
     d7c:	ba 95       	dec	r27
     d7e:	c9 f7       	brne	.-14     	; 0xd72 <__fixunssfsi+0x14>
     d80:	14 c0       	rjmp	.+40     	; 0xdaa <__fixunssfsi+0x4c>
     d82:	b1 30       	cpi	r27, 0x01	; 1
     d84:	91 f0       	breq	.+36     	; 0xdaa <__fixunssfsi+0x4c>
     d86:	0e 94 65 07 	call	0xeca	; 0xeca <__fp_zero>
     d8a:	b1 e0       	ldi	r27, 0x01	; 1
     d8c:	08 95       	ret
     d8e:	0c 94 65 07 	jmp	0xeca	; 0xeca <__fp_zero>
     d92:	67 2f       	mov	r22, r23
     d94:	78 2f       	mov	r23, r24
     d96:	88 27       	eor	r24, r24
     d98:	b8 5f       	subi	r27, 0xF8	; 248
     d9a:	39 f0       	breq	.+14     	; 0xdaa <__fixunssfsi+0x4c>
     d9c:	b9 3f       	cpi	r27, 0xF9	; 249
     d9e:	cc f3       	brlt	.-14     	; 0xd92 <__fixunssfsi+0x34>
     da0:	86 95       	lsr	r24
     da2:	77 95       	ror	r23
     da4:	67 95       	ror	r22
     da6:	b3 95       	inc	r27
     da8:	d9 f7       	brne	.-10     	; 0xda0 <__fixunssfsi+0x42>
     daa:	3e f4       	brtc	.+14     	; 0xdba <__fixunssfsi+0x5c>
     dac:	90 95       	com	r25
     dae:	80 95       	com	r24
     db0:	70 95       	com	r23
     db2:	61 95       	neg	r22
     db4:	7f 4f       	sbci	r23, 0xFF	; 255
     db6:	8f 4f       	sbci	r24, 0xFF	; 255
     db8:	9f 4f       	sbci	r25, 0xFF	; 255
     dba:	08 95       	ret

00000dbc <__floatunsisf>:
     dbc:	e8 94       	clt
     dbe:	09 c0       	rjmp	.+18     	; 0xdd2 <__floatsisf+0x12>

00000dc0 <__floatsisf>:
     dc0:	97 fb       	bst	r25, 7
     dc2:	3e f4       	brtc	.+14     	; 0xdd2 <__floatsisf+0x12>
     dc4:	90 95       	com	r25
     dc6:	80 95       	com	r24
     dc8:	70 95       	com	r23
     dca:	61 95       	neg	r22
     dcc:	7f 4f       	sbci	r23, 0xFF	; 255
     dce:	8f 4f       	sbci	r24, 0xFF	; 255
     dd0:	9f 4f       	sbci	r25, 0xFF	; 255
     dd2:	99 23       	and	r25, r25
     dd4:	a9 f0       	breq	.+42     	; 0xe00 <__floatsisf+0x40>
     dd6:	f9 2f       	mov	r31, r25
     dd8:	96 e9       	ldi	r25, 0x96	; 150
     dda:	bb 27       	eor	r27, r27
     ddc:	93 95       	inc	r25
     dde:	f6 95       	lsr	r31
     de0:	87 95       	ror	r24
     de2:	77 95       	ror	r23
     de4:	67 95       	ror	r22
     de6:	b7 95       	ror	r27
     de8:	f1 11       	cpse	r31, r1
     dea:	f8 cf       	rjmp	.-16     	; 0xddc <__floatsisf+0x1c>
     dec:	fa f4       	brpl	.+62     	; 0xe2c <__floatsisf+0x6c>
     dee:	bb 0f       	add	r27, r27
     df0:	11 f4       	brne	.+4      	; 0xdf6 <__floatsisf+0x36>
     df2:	60 ff       	sbrs	r22, 0
     df4:	1b c0       	rjmp	.+54     	; 0xe2c <__floatsisf+0x6c>
     df6:	6f 5f       	subi	r22, 0xFF	; 255
     df8:	7f 4f       	sbci	r23, 0xFF	; 255
     dfa:	8f 4f       	sbci	r24, 0xFF	; 255
     dfc:	9f 4f       	sbci	r25, 0xFF	; 255
     dfe:	16 c0       	rjmp	.+44     	; 0xe2c <__floatsisf+0x6c>
     e00:	88 23       	and	r24, r24
     e02:	11 f0       	breq	.+4      	; 0xe08 <__floatsisf+0x48>
     e04:	96 e9       	ldi	r25, 0x96	; 150
     e06:	11 c0       	rjmp	.+34     	; 0xe2a <__floatsisf+0x6a>
     e08:	77 23       	and	r23, r23
     e0a:	21 f0       	breq	.+8      	; 0xe14 <__floatsisf+0x54>
     e0c:	9e e8       	ldi	r25, 0x8E	; 142
     e0e:	87 2f       	mov	r24, r23
     e10:	76 2f       	mov	r23, r22
     e12:	05 c0       	rjmp	.+10     	; 0xe1e <__floatsisf+0x5e>
     e14:	66 23       	and	r22, r22
     e16:	71 f0       	breq	.+28     	; 0xe34 <__floatsisf+0x74>
     e18:	96 e8       	ldi	r25, 0x86	; 134
     e1a:	86 2f       	mov	r24, r22
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	2a f0       	brmi	.+10     	; 0xe2c <__floatsisf+0x6c>
     e22:	9a 95       	dec	r25
     e24:	66 0f       	add	r22, r22
     e26:	77 1f       	adc	r23, r23
     e28:	88 1f       	adc	r24, r24
     e2a:	da f7       	brpl	.-10     	; 0xe22 <__floatsisf+0x62>
     e2c:	88 0f       	add	r24, r24
     e2e:	96 95       	lsr	r25
     e30:	87 95       	ror	r24
     e32:	97 f9       	bld	r25, 7
     e34:	08 95       	ret

00000e36 <__fp_inf>:
     e36:	97 f9       	bld	r25, 7
     e38:	9f 67       	ori	r25, 0x7F	; 127
     e3a:	80 e8       	ldi	r24, 0x80	; 128
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	08 95       	ret

00000e42 <__fp_nan>:
     e42:	9f ef       	ldi	r25, 0xFF	; 255
     e44:	80 ec       	ldi	r24, 0xC0	; 192
     e46:	08 95       	ret

00000e48 <__fp_pscA>:
     e48:	00 24       	eor	r0, r0
     e4a:	0a 94       	dec	r0
     e4c:	16 16       	cp	r1, r22
     e4e:	17 06       	cpc	r1, r23
     e50:	18 06       	cpc	r1, r24
     e52:	09 06       	cpc	r0, r25
     e54:	08 95       	ret

00000e56 <__fp_pscB>:
     e56:	00 24       	eor	r0, r0
     e58:	0a 94       	dec	r0
     e5a:	12 16       	cp	r1, r18
     e5c:	13 06       	cpc	r1, r19
     e5e:	14 06       	cpc	r1, r20
     e60:	05 06       	cpc	r0, r21
     e62:	08 95       	ret

00000e64 <__fp_round>:
     e64:	09 2e       	mov	r0, r25
     e66:	03 94       	inc	r0
     e68:	00 0c       	add	r0, r0
     e6a:	11 f4       	brne	.+4      	; 0xe70 <__fp_round+0xc>
     e6c:	88 23       	and	r24, r24
     e6e:	52 f0       	brmi	.+20     	; 0xe84 <__fp_round+0x20>
     e70:	bb 0f       	add	r27, r27
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fp_round+0x20>
     e74:	bf 2b       	or	r27, r31
     e76:	11 f4       	brne	.+4      	; 0xe7c <__fp_round+0x18>
     e78:	60 ff       	sbrs	r22, 0
     e7a:	04 c0       	rjmp	.+8      	; 0xe84 <__fp_round+0x20>
     e7c:	6f 5f       	subi	r22, 0xFF	; 255
     e7e:	7f 4f       	sbci	r23, 0xFF	; 255
     e80:	8f 4f       	sbci	r24, 0xFF	; 255
     e82:	9f 4f       	sbci	r25, 0xFF	; 255
     e84:	08 95       	ret

00000e86 <__fp_split3>:
     e86:	57 fd       	sbrc	r21, 7
     e88:	90 58       	subi	r25, 0x80	; 128
     e8a:	44 0f       	add	r20, r20
     e8c:	55 1f       	adc	r21, r21
     e8e:	59 f0       	breq	.+22     	; 0xea6 <__fp_splitA+0x10>
     e90:	5f 3f       	cpi	r21, 0xFF	; 255
     e92:	71 f0       	breq	.+28     	; 0xeb0 <__fp_splitA+0x1a>
     e94:	47 95       	ror	r20

00000e96 <__fp_splitA>:
     e96:	88 0f       	add	r24, r24
     e98:	97 fb       	bst	r25, 7
     e9a:	99 1f       	adc	r25, r25
     e9c:	61 f0       	breq	.+24     	; 0xeb6 <__fp_splitA+0x20>
     e9e:	9f 3f       	cpi	r25, 0xFF	; 255
     ea0:	79 f0       	breq	.+30     	; 0xec0 <__fp_splitA+0x2a>
     ea2:	87 95       	ror	r24
     ea4:	08 95       	ret
     ea6:	12 16       	cp	r1, r18
     ea8:	13 06       	cpc	r1, r19
     eaa:	14 06       	cpc	r1, r20
     eac:	55 1f       	adc	r21, r21
     eae:	f2 cf       	rjmp	.-28     	; 0xe94 <__fp_split3+0xe>
     eb0:	46 95       	lsr	r20
     eb2:	f1 df       	rcall	.-30     	; 0xe96 <__fp_splitA>
     eb4:	08 c0       	rjmp	.+16     	; 0xec6 <__fp_splitA+0x30>
     eb6:	16 16       	cp	r1, r22
     eb8:	17 06       	cpc	r1, r23
     eba:	18 06       	cpc	r1, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	f1 cf       	rjmp	.-30     	; 0xea2 <__fp_splitA+0xc>
     ec0:	86 95       	lsr	r24
     ec2:	71 05       	cpc	r23, r1
     ec4:	61 05       	cpc	r22, r1
     ec6:	08 94       	sec
     ec8:	08 95       	ret

00000eca <__fp_zero>:
     eca:	e8 94       	clt

00000ecc <__fp_szero>:
     ecc:	bb 27       	eor	r27, r27
     ece:	66 27       	eor	r22, r22
     ed0:	77 27       	eor	r23, r23
     ed2:	cb 01       	movw	r24, r22
     ed4:	97 f9       	bld	r25, 7
     ed6:	08 95       	ret

00000ed8 <__mulsf3>:
     ed8:	0e 94 7f 07 	call	0xefe	; 0xefe <__mulsf3x>
     edc:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__fp_round>
     ee0:	0e 94 24 07 	call	0xe48	; 0xe48 <__fp_pscA>
     ee4:	38 f0       	brcs	.+14     	; 0xef4 <__mulsf3+0x1c>
     ee6:	0e 94 2b 07 	call	0xe56	; 0xe56 <__fp_pscB>
     eea:	20 f0       	brcs	.+8      	; 0xef4 <__mulsf3+0x1c>
     eec:	95 23       	and	r25, r21
     eee:	11 f0       	breq	.+4      	; 0xef4 <__mulsf3+0x1c>
     ef0:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <__fp_inf>
     ef4:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__fp_nan>
     ef8:	11 24       	eor	r1, r1
     efa:	0c 94 66 07 	jmp	0xecc	; 0xecc <__fp_szero>

00000efe <__mulsf3x>:
     efe:	0e 94 43 07 	call	0xe86	; 0xe86 <__fp_split3>
     f02:	70 f3       	brcs	.-36     	; 0xee0 <__mulsf3+0x8>

00000f04 <__mulsf3_pse>:
     f04:	95 9f       	mul	r25, r21
     f06:	c1 f3       	breq	.-16     	; 0xef8 <__mulsf3+0x20>
     f08:	95 0f       	add	r25, r21
     f0a:	50 e0       	ldi	r21, 0x00	; 0
     f0c:	55 1f       	adc	r21, r21
     f0e:	62 9f       	mul	r22, r18
     f10:	f0 01       	movw	r30, r0
     f12:	72 9f       	mul	r23, r18
     f14:	bb 27       	eor	r27, r27
     f16:	f0 0d       	add	r31, r0
     f18:	b1 1d       	adc	r27, r1
     f1a:	63 9f       	mul	r22, r19
     f1c:	aa 27       	eor	r26, r26
     f1e:	f0 0d       	add	r31, r0
     f20:	b1 1d       	adc	r27, r1
     f22:	aa 1f       	adc	r26, r26
     f24:	64 9f       	mul	r22, r20
     f26:	66 27       	eor	r22, r22
     f28:	b0 0d       	add	r27, r0
     f2a:	a1 1d       	adc	r26, r1
     f2c:	66 1f       	adc	r22, r22
     f2e:	82 9f       	mul	r24, r18
     f30:	22 27       	eor	r18, r18
     f32:	b0 0d       	add	r27, r0
     f34:	a1 1d       	adc	r26, r1
     f36:	62 1f       	adc	r22, r18
     f38:	73 9f       	mul	r23, r19
     f3a:	b0 0d       	add	r27, r0
     f3c:	a1 1d       	adc	r26, r1
     f3e:	62 1f       	adc	r22, r18
     f40:	83 9f       	mul	r24, r19
     f42:	a0 0d       	add	r26, r0
     f44:	61 1d       	adc	r22, r1
     f46:	22 1f       	adc	r18, r18
     f48:	74 9f       	mul	r23, r20
     f4a:	33 27       	eor	r19, r19
     f4c:	a0 0d       	add	r26, r0
     f4e:	61 1d       	adc	r22, r1
     f50:	23 1f       	adc	r18, r19
     f52:	84 9f       	mul	r24, r20
     f54:	60 0d       	add	r22, r0
     f56:	21 1d       	adc	r18, r1
     f58:	82 2f       	mov	r24, r18
     f5a:	76 2f       	mov	r23, r22
     f5c:	6a 2f       	mov	r22, r26
     f5e:	11 24       	eor	r1, r1
     f60:	9f 57       	subi	r25, 0x7F	; 127
     f62:	50 40       	sbci	r21, 0x00	; 0
     f64:	9a f0       	brmi	.+38     	; 0xf8c <__mulsf3_pse+0x88>
     f66:	f1 f0       	breq	.+60     	; 0xfa4 <__mulsf3_pse+0xa0>
     f68:	88 23       	and	r24, r24
     f6a:	4a f0       	brmi	.+18     	; 0xf7e <__mulsf3_pse+0x7a>
     f6c:	ee 0f       	add	r30, r30
     f6e:	ff 1f       	adc	r31, r31
     f70:	bb 1f       	adc	r27, r27
     f72:	66 1f       	adc	r22, r22
     f74:	77 1f       	adc	r23, r23
     f76:	88 1f       	adc	r24, r24
     f78:	91 50       	subi	r25, 0x01	; 1
     f7a:	50 40       	sbci	r21, 0x00	; 0
     f7c:	a9 f7       	brne	.-22     	; 0xf68 <__mulsf3_pse+0x64>
     f7e:	9e 3f       	cpi	r25, 0xFE	; 254
     f80:	51 05       	cpc	r21, r1
     f82:	80 f0       	brcs	.+32     	; 0xfa4 <__mulsf3_pse+0xa0>
     f84:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <__fp_inf>
     f88:	0c 94 66 07 	jmp	0xecc	; 0xecc <__fp_szero>
     f8c:	5f 3f       	cpi	r21, 0xFF	; 255
     f8e:	e4 f3       	brlt	.-8      	; 0xf88 <__mulsf3_pse+0x84>
     f90:	98 3e       	cpi	r25, 0xE8	; 232
     f92:	d4 f3       	brlt	.-12     	; 0xf88 <__mulsf3_pse+0x84>
     f94:	86 95       	lsr	r24
     f96:	77 95       	ror	r23
     f98:	67 95       	ror	r22
     f9a:	b7 95       	ror	r27
     f9c:	f7 95       	ror	r31
     f9e:	e7 95       	ror	r30
     fa0:	9f 5f       	subi	r25, 0xFF	; 255
     fa2:	c1 f7       	brne	.-16     	; 0xf94 <__mulsf3_pse+0x90>
     fa4:	fe 2b       	or	r31, r30
     fa6:	88 0f       	add	r24, r24
     fa8:	91 1d       	adc	r25, r1
     faa:	96 95       	lsr	r25
     fac:	87 95       	ror	r24
     fae:	97 f9       	bld	r25, 7
     fb0:	08 95       	ret

00000fb2 <sprintf>:
     fb2:	ae e0       	ldi	r26, 0x0E	; 14
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	ef ed       	ldi	r30, 0xDF	; 223
     fb8:	f7 e0       	ldi	r31, 0x07	; 7
     fba:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__prologue_saves__+0x1c>
     fbe:	0d 89       	ldd	r16, Y+21	; 0x15
     fc0:	1e 89       	ldd	r17, Y+22	; 0x16
     fc2:	86 e0       	ldi	r24, 0x06	; 6
     fc4:	8c 83       	std	Y+4, r24	; 0x04
     fc6:	1a 83       	std	Y+2, r17	; 0x02
     fc8:	09 83       	std	Y+1, r16	; 0x01
     fca:	8f ef       	ldi	r24, 0xFF	; 255
     fcc:	9f e7       	ldi	r25, 0x7F	; 127
     fce:	9e 83       	std	Y+6, r25	; 0x06
     fd0:	8d 83       	std	Y+5, r24	; 0x05
     fd2:	ae 01       	movw	r20, r28
     fd4:	47 5e       	subi	r20, 0xE7	; 231
     fd6:	5f 4f       	sbci	r21, 0xFF	; 255
     fd8:	6f 89       	ldd	r22, Y+23	; 0x17
     fda:	78 8d       	ldd	r23, Y+24	; 0x18
     fdc:	ce 01       	movw	r24, r28
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	0e 94 fb 07 	call	0xff6	; 0xff6 <vfprintf>
     fe4:	ef 81       	ldd	r30, Y+7	; 0x07
     fe6:	f8 85       	ldd	r31, Y+8	; 0x08
     fe8:	e0 0f       	add	r30, r16
     fea:	f1 1f       	adc	r31, r17
     fec:	10 82       	st	Z, r1
     fee:	2e 96       	adiw	r28, 0x0e	; 14
     ff0:	e4 e0       	ldi	r30, 0x04	; 4
     ff2:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <__epilogue_restores__+0x1c>

00000ff6 <vfprintf>:
     ff6:	ab e0       	ldi	r26, 0x0B	; 11
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e1 e0       	ldi	r30, 0x01	; 1
     ffc:	f8 e0       	ldi	r31, 0x08	; 8
     ffe:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__prologue_saves__>
    1002:	6c 01       	movw	r12, r24
    1004:	7b 01       	movw	r14, r22
    1006:	8a 01       	movw	r16, r20
    1008:	fc 01       	movw	r30, r24
    100a:	17 82       	std	Z+7, r1	; 0x07
    100c:	16 82       	std	Z+6, r1	; 0x06
    100e:	83 81       	ldd	r24, Z+3	; 0x03
    1010:	81 ff       	sbrs	r24, 1
    1012:	cc c1       	rjmp	.+920    	; 0x13ac <vfprintf+0x3b6>
    1014:	ce 01       	movw	r24, r28
    1016:	01 96       	adiw	r24, 0x01	; 1
    1018:	3c 01       	movw	r6, r24
    101a:	f6 01       	movw	r30, r12
    101c:	93 81       	ldd	r25, Z+3	; 0x03
    101e:	f7 01       	movw	r30, r14
    1020:	93 fd       	sbrc	r25, 3
    1022:	85 91       	lpm	r24, Z+
    1024:	93 ff       	sbrs	r25, 3
    1026:	81 91       	ld	r24, Z+
    1028:	7f 01       	movw	r14, r30
    102a:	88 23       	and	r24, r24
    102c:	09 f4       	brne	.+2      	; 0x1030 <vfprintf+0x3a>
    102e:	ba c1       	rjmp	.+884    	; 0x13a4 <vfprintf+0x3ae>
    1030:	85 32       	cpi	r24, 0x25	; 37
    1032:	39 f4       	brne	.+14     	; 0x1042 <vfprintf+0x4c>
    1034:	93 fd       	sbrc	r25, 3
    1036:	85 91       	lpm	r24, Z+
    1038:	93 ff       	sbrs	r25, 3
    103a:	81 91       	ld	r24, Z+
    103c:	7f 01       	movw	r14, r30
    103e:	85 32       	cpi	r24, 0x25	; 37
    1040:	29 f4       	brne	.+10     	; 0x104c <vfprintf+0x56>
    1042:	b6 01       	movw	r22, r12
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <fputc>
    104a:	e7 cf       	rjmp	.-50     	; 0x101a <vfprintf+0x24>
    104c:	91 2c       	mov	r9, r1
    104e:	21 2c       	mov	r2, r1
    1050:	31 2c       	mov	r3, r1
    1052:	ff e1       	ldi	r31, 0x1F	; 31
    1054:	f3 15       	cp	r31, r3
    1056:	d8 f0       	brcs	.+54     	; 0x108e <vfprintf+0x98>
    1058:	8b 32       	cpi	r24, 0x2B	; 43
    105a:	79 f0       	breq	.+30     	; 0x107a <vfprintf+0x84>
    105c:	38 f4       	brcc	.+14     	; 0x106c <vfprintf+0x76>
    105e:	80 32       	cpi	r24, 0x20	; 32
    1060:	79 f0       	breq	.+30     	; 0x1080 <vfprintf+0x8a>
    1062:	83 32       	cpi	r24, 0x23	; 35
    1064:	a1 f4       	brne	.+40     	; 0x108e <vfprintf+0x98>
    1066:	23 2d       	mov	r18, r3
    1068:	20 61       	ori	r18, 0x10	; 16
    106a:	1d c0       	rjmp	.+58     	; 0x10a6 <vfprintf+0xb0>
    106c:	8d 32       	cpi	r24, 0x2D	; 45
    106e:	61 f0       	breq	.+24     	; 0x1088 <vfprintf+0x92>
    1070:	80 33       	cpi	r24, 0x30	; 48
    1072:	69 f4       	brne	.+26     	; 0x108e <vfprintf+0x98>
    1074:	23 2d       	mov	r18, r3
    1076:	21 60       	ori	r18, 0x01	; 1
    1078:	16 c0       	rjmp	.+44     	; 0x10a6 <vfprintf+0xb0>
    107a:	83 2d       	mov	r24, r3
    107c:	82 60       	ori	r24, 0x02	; 2
    107e:	38 2e       	mov	r3, r24
    1080:	e3 2d       	mov	r30, r3
    1082:	e4 60       	ori	r30, 0x04	; 4
    1084:	3e 2e       	mov	r3, r30
    1086:	2a c0       	rjmp	.+84     	; 0x10dc <vfprintf+0xe6>
    1088:	f3 2d       	mov	r31, r3
    108a:	f8 60       	ori	r31, 0x08	; 8
    108c:	1d c0       	rjmp	.+58     	; 0x10c8 <vfprintf+0xd2>
    108e:	37 fc       	sbrc	r3, 7
    1090:	2d c0       	rjmp	.+90     	; 0x10ec <vfprintf+0xf6>
    1092:	20 ed       	ldi	r18, 0xD0	; 208
    1094:	28 0f       	add	r18, r24
    1096:	2a 30       	cpi	r18, 0x0A	; 10
    1098:	40 f0       	brcs	.+16     	; 0x10aa <vfprintf+0xb4>
    109a:	8e 32       	cpi	r24, 0x2E	; 46
    109c:	b9 f4       	brne	.+46     	; 0x10cc <vfprintf+0xd6>
    109e:	36 fc       	sbrc	r3, 6
    10a0:	81 c1       	rjmp	.+770    	; 0x13a4 <vfprintf+0x3ae>
    10a2:	23 2d       	mov	r18, r3
    10a4:	20 64       	ori	r18, 0x40	; 64
    10a6:	32 2e       	mov	r3, r18
    10a8:	19 c0       	rjmp	.+50     	; 0x10dc <vfprintf+0xe6>
    10aa:	36 fe       	sbrs	r3, 6
    10ac:	06 c0       	rjmp	.+12     	; 0x10ba <vfprintf+0xc4>
    10ae:	8a e0       	ldi	r24, 0x0A	; 10
    10b0:	98 9e       	mul	r9, r24
    10b2:	20 0d       	add	r18, r0
    10b4:	11 24       	eor	r1, r1
    10b6:	92 2e       	mov	r9, r18
    10b8:	11 c0       	rjmp	.+34     	; 0x10dc <vfprintf+0xe6>
    10ba:	ea e0       	ldi	r30, 0x0A	; 10
    10bc:	2e 9e       	mul	r2, r30
    10be:	20 0d       	add	r18, r0
    10c0:	11 24       	eor	r1, r1
    10c2:	22 2e       	mov	r2, r18
    10c4:	f3 2d       	mov	r31, r3
    10c6:	f0 62       	ori	r31, 0x20	; 32
    10c8:	3f 2e       	mov	r3, r31
    10ca:	08 c0       	rjmp	.+16     	; 0x10dc <vfprintf+0xe6>
    10cc:	8c 36       	cpi	r24, 0x6C	; 108
    10ce:	21 f4       	brne	.+8      	; 0x10d8 <vfprintf+0xe2>
    10d0:	83 2d       	mov	r24, r3
    10d2:	80 68       	ori	r24, 0x80	; 128
    10d4:	38 2e       	mov	r3, r24
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <vfprintf+0xe6>
    10d8:	88 36       	cpi	r24, 0x68	; 104
    10da:	41 f4       	brne	.+16     	; 0x10ec <vfprintf+0xf6>
    10dc:	f7 01       	movw	r30, r14
    10de:	93 fd       	sbrc	r25, 3
    10e0:	85 91       	lpm	r24, Z+
    10e2:	93 ff       	sbrs	r25, 3
    10e4:	81 91       	ld	r24, Z+
    10e6:	7f 01       	movw	r14, r30
    10e8:	81 11       	cpse	r24, r1
    10ea:	b3 cf       	rjmp	.-154    	; 0x1052 <vfprintf+0x5c>
    10ec:	98 2f       	mov	r25, r24
    10ee:	9f 7d       	andi	r25, 0xDF	; 223
    10f0:	95 54       	subi	r25, 0x45	; 69
    10f2:	93 30       	cpi	r25, 0x03	; 3
    10f4:	28 f4       	brcc	.+10     	; 0x1100 <vfprintf+0x10a>
    10f6:	0c 5f       	subi	r16, 0xFC	; 252
    10f8:	1f 4f       	sbci	r17, 0xFF	; 255
    10fa:	9f e3       	ldi	r25, 0x3F	; 63
    10fc:	99 83       	std	Y+1, r25	; 0x01
    10fe:	0d c0       	rjmp	.+26     	; 0x111a <vfprintf+0x124>
    1100:	83 36       	cpi	r24, 0x63	; 99
    1102:	31 f0       	breq	.+12     	; 0x1110 <vfprintf+0x11a>
    1104:	83 37       	cpi	r24, 0x73	; 115
    1106:	71 f0       	breq	.+28     	; 0x1124 <vfprintf+0x12e>
    1108:	83 35       	cpi	r24, 0x53	; 83
    110a:	09 f0       	breq	.+2      	; 0x110e <vfprintf+0x118>
    110c:	59 c0       	rjmp	.+178    	; 0x11c0 <vfprintf+0x1ca>
    110e:	21 c0       	rjmp	.+66     	; 0x1152 <vfprintf+0x15c>
    1110:	f8 01       	movw	r30, r16
    1112:	80 81       	ld	r24, Z
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	0e 5f       	subi	r16, 0xFE	; 254
    1118:	1f 4f       	sbci	r17, 0xFF	; 255
    111a:	88 24       	eor	r8, r8
    111c:	83 94       	inc	r8
    111e:	91 2c       	mov	r9, r1
    1120:	53 01       	movw	r10, r6
    1122:	13 c0       	rjmp	.+38     	; 0x114a <vfprintf+0x154>
    1124:	28 01       	movw	r4, r16
    1126:	f2 e0       	ldi	r31, 0x02	; 2
    1128:	4f 0e       	add	r4, r31
    112a:	51 1c       	adc	r5, r1
    112c:	f8 01       	movw	r30, r16
    112e:	a0 80       	ld	r10, Z
    1130:	b1 80       	ldd	r11, Z+1	; 0x01
    1132:	36 fe       	sbrs	r3, 6
    1134:	03 c0       	rjmp	.+6      	; 0x113c <vfprintf+0x146>
    1136:	69 2d       	mov	r22, r9
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <vfprintf+0x14a>
    113c:	6f ef       	ldi	r22, 0xFF	; 255
    113e:	7f ef       	ldi	r23, 0xFF	; 255
    1140:	c5 01       	movw	r24, r10
    1142:	0e 94 e7 09 	call	0x13ce	; 0x13ce <strnlen>
    1146:	4c 01       	movw	r8, r24
    1148:	82 01       	movw	r16, r4
    114a:	f3 2d       	mov	r31, r3
    114c:	ff 77       	andi	r31, 0x7F	; 127
    114e:	3f 2e       	mov	r3, r31
    1150:	16 c0       	rjmp	.+44     	; 0x117e <vfprintf+0x188>
    1152:	28 01       	movw	r4, r16
    1154:	22 e0       	ldi	r18, 0x02	; 2
    1156:	42 0e       	add	r4, r18
    1158:	51 1c       	adc	r5, r1
    115a:	f8 01       	movw	r30, r16
    115c:	a0 80       	ld	r10, Z
    115e:	b1 80       	ldd	r11, Z+1	; 0x01
    1160:	36 fe       	sbrs	r3, 6
    1162:	03 c0       	rjmp	.+6      	; 0x116a <vfprintf+0x174>
    1164:	69 2d       	mov	r22, r9
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	02 c0       	rjmp	.+4      	; 0x116e <vfprintf+0x178>
    116a:	6f ef       	ldi	r22, 0xFF	; 255
    116c:	7f ef       	ldi	r23, 0xFF	; 255
    116e:	c5 01       	movw	r24, r10
    1170:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <strnlen_P>
    1174:	4c 01       	movw	r8, r24
    1176:	f3 2d       	mov	r31, r3
    1178:	f0 68       	ori	r31, 0x80	; 128
    117a:	3f 2e       	mov	r3, r31
    117c:	82 01       	movw	r16, r4
    117e:	33 fc       	sbrc	r3, 3
    1180:	1b c0       	rjmp	.+54     	; 0x11b8 <vfprintf+0x1c2>
    1182:	82 2d       	mov	r24, r2
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	88 16       	cp	r8, r24
    1188:	99 06       	cpc	r9, r25
    118a:	b0 f4       	brcc	.+44     	; 0x11b8 <vfprintf+0x1c2>
    118c:	b6 01       	movw	r22, r12
    118e:	80 e2       	ldi	r24, 0x20	; 32
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <fputc>
    1196:	2a 94       	dec	r2
    1198:	f4 cf       	rjmp	.-24     	; 0x1182 <vfprintf+0x18c>
    119a:	f5 01       	movw	r30, r10
    119c:	37 fc       	sbrc	r3, 7
    119e:	85 91       	lpm	r24, Z+
    11a0:	37 fe       	sbrs	r3, 7
    11a2:	81 91       	ld	r24, Z+
    11a4:	5f 01       	movw	r10, r30
    11a6:	b6 01       	movw	r22, r12
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <fputc>
    11ae:	21 10       	cpse	r2, r1
    11b0:	2a 94       	dec	r2
    11b2:	21 e0       	ldi	r18, 0x01	; 1
    11b4:	82 1a       	sub	r8, r18
    11b6:	91 08       	sbc	r9, r1
    11b8:	81 14       	cp	r8, r1
    11ba:	91 04       	cpc	r9, r1
    11bc:	71 f7       	brne	.-36     	; 0x119a <vfprintf+0x1a4>
    11be:	e8 c0       	rjmp	.+464    	; 0x1390 <vfprintf+0x39a>
    11c0:	84 36       	cpi	r24, 0x64	; 100
    11c2:	11 f0       	breq	.+4      	; 0x11c8 <vfprintf+0x1d2>
    11c4:	89 36       	cpi	r24, 0x69	; 105
    11c6:	41 f5       	brne	.+80     	; 0x1218 <vfprintf+0x222>
    11c8:	f8 01       	movw	r30, r16
    11ca:	37 fe       	sbrs	r3, 7
    11cc:	07 c0       	rjmp	.+14     	; 0x11dc <vfprintf+0x1e6>
    11ce:	60 81       	ld	r22, Z
    11d0:	71 81       	ldd	r23, Z+1	; 0x01
    11d2:	82 81       	ldd	r24, Z+2	; 0x02
    11d4:	93 81       	ldd	r25, Z+3	; 0x03
    11d6:	0c 5f       	subi	r16, 0xFC	; 252
    11d8:	1f 4f       	sbci	r17, 0xFF	; 255
    11da:	08 c0       	rjmp	.+16     	; 0x11ec <vfprintf+0x1f6>
    11dc:	60 81       	ld	r22, Z
    11de:	71 81       	ldd	r23, Z+1	; 0x01
    11e0:	07 2e       	mov	r0, r23
    11e2:	00 0c       	add	r0, r0
    11e4:	88 0b       	sbc	r24, r24
    11e6:	99 0b       	sbc	r25, r25
    11e8:	0e 5f       	subi	r16, 0xFE	; 254
    11ea:	1f 4f       	sbci	r17, 0xFF	; 255
    11ec:	f3 2d       	mov	r31, r3
    11ee:	ff 76       	andi	r31, 0x6F	; 111
    11f0:	3f 2e       	mov	r3, r31
    11f2:	97 ff       	sbrs	r25, 7
    11f4:	09 c0       	rjmp	.+18     	; 0x1208 <vfprintf+0x212>
    11f6:	90 95       	com	r25
    11f8:	80 95       	com	r24
    11fa:	70 95       	com	r23
    11fc:	61 95       	neg	r22
    11fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1200:	8f 4f       	sbci	r24, 0xFF	; 255
    1202:	9f 4f       	sbci	r25, 0xFF	; 255
    1204:	f0 68       	ori	r31, 0x80	; 128
    1206:	3f 2e       	mov	r3, r31
    1208:	2a e0       	ldi	r18, 0x0A	; 10
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	a3 01       	movw	r20, r6
    120e:	0e 94 2e 0a 	call	0x145c	; 0x145c <__ultoa_invert>
    1212:	88 2e       	mov	r8, r24
    1214:	86 18       	sub	r8, r6
    1216:	45 c0       	rjmp	.+138    	; 0x12a2 <vfprintf+0x2ac>
    1218:	85 37       	cpi	r24, 0x75	; 117
    121a:	31 f4       	brne	.+12     	; 0x1228 <vfprintf+0x232>
    121c:	23 2d       	mov	r18, r3
    121e:	2f 7e       	andi	r18, 0xEF	; 239
    1220:	b2 2e       	mov	r11, r18
    1222:	2a e0       	ldi	r18, 0x0A	; 10
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	25 c0       	rjmp	.+74     	; 0x1272 <vfprintf+0x27c>
    1228:	93 2d       	mov	r25, r3
    122a:	99 7f       	andi	r25, 0xF9	; 249
    122c:	b9 2e       	mov	r11, r25
    122e:	8f 36       	cpi	r24, 0x6F	; 111
    1230:	c1 f0       	breq	.+48     	; 0x1262 <vfprintf+0x26c>
    1232:	18 f4       	brcc	.+6      	; 0x123a <vfprintf+0x244>
    1234:	88 35       	cpi	r24, 0x58	; 88
    1236:	79 f0       	breq	.+30     	; 0x1256 <vfprintf+0x260>
    1238:	b5 c0       	rjmp	.+362    	; 0x13a4 <vfprintf+0x3ae>
    123a:	80 37       	cpi	r24, 0x70	; 112
    123c:	19 f0       	breq	.+6      	; 0x1244 <vfprintf+0x24e>
    123e:	88 37       	cpi	r24, 0x78	; 120
    1240:	21 f0       	breq	.+8      	; 0x124a <vfprintf+0x254>
    1242:	b0 c0       	rjmp	.+352    	; 0x13a4 <vfprintf+0x3ae>
    1244:	e9 2f       	mov	r30, r25
    1246:	e0 61       	ori	r30, 0x10	; 16
    1248:	be 2e       	mov	r11, r30
    124a:	b4 fe       	sbrs	r11, 4
    124c:	0d c0       	rjmp	.+26     	; 0x1268 <vfprintf+0x272>
    124e:	fb 2d       	mov	r31, r11
    1250:	f4 60       	ori	r31, 0x04	; 4
    1252:	bf 2e       	mov	r11, r31
    1254:	09 c0       	rjmp	.+18     	; 0x1268 <vfprintf+0x272>
    1256:	34 fe       	sbrs	r3, 4
    1258:	0a c0       	rjmp	.+20     	; 0x126e <vfprintf+0x278>
    125a:	29 2f       	mov	r18, r25
    125c:	26 60       	ori	r18, 0x06	; 6
    125e:	b2 2e       	mov	r11, r18
    1260:	06 c0       	rjmp	.+12     	; 0x126e <vfprintf+0x278>
    1262:	28 e0       	ldi	r18, 0x08	; 8
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	05 c0       	rjmp	.+10     	; 0x1272 <vfprintf+0x27c>
    1268:	20 e1       	ldi	r18, 0x10	; 16
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <vfprintf+0x27c>
    126e:	20 e1       	ldi	r18, 0x10	; 16
    1270:	32 e0       	ldi	r19, 0x02	; 2
    1272:	f8 01       	movw	r30, r16
    1274:	b7 fe       	sbrs	r11, 7
    1276:	07 c0       	rjmp	.+14     	; 0x1286 <vfprintf+0x290>
    1278:	60 81       	ld	r22, Z
    127a:	71 81       	ldd	r23, Z+1	; 0x01
    127c:	82 81       	ldd	r24, Z+2	; 0x02
    127e:	93 81       	ldd	r25, Z+3	; 0x03
    1280:	0c 5f       	subi	r16, 0xFC	; 252
    1282:	1f 4f       	sbci	r17, 0xFF	; 255
    1284:	06 c0       	rjmp	.+12     	; 0x1292 <vfprintf+0x29c>
    1286:	60 81       	ld	r22, Z
    1288:	71 81       	ldd	r23, Z+1	; 0x01
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	0e 5f       	subi	r16, 0xFE	; 254
    1290:	1f 4f       	sbci	r17, 0xFF	; 255
    1292:	a3 01       	movw	r20, r6
    1294:	0e 94 2e 0a 	call	0x145c	; 0x145c <__ultoa_invert>
    1298:	88 2e       	mov	r8, r24
    129a:	86 18       	sub	r8, r6
    129c:	fb 2d       	mov	r31, r11
    129e:	ff 77       	andi	r31, 0x7F	; 127
    12a0:	3f 2e       	mov	r3, r31
    12a2:	36 fe       	sbrs	r3, 6
    12a4:	0d c0       	rjmp	.+26     	; 0x12c0 <vfprintf+0x2ca>
    12a6:	23 2d       	mov	r18, r3
    12a8:	2e 7f       	andi	r18, 0xFE	; 254
    12aa:	a2 2e       	mov	r10, r18
    12ac:	89 14       	cp	r8, r9
    12ae:	58 f4       	brcc	.+22     	; 0x12c6 <vfprintf+0x2d0>
    12b0:	34 fe       	sbrs	r3, 4
    12b2:	0b c0       	rjmp	.+22     	; 0x12ca <vfprintf+0x2d4>
    12b4:	32 fc       	sbrc	r3, 2
    12b6:	09 c0       	rjmp	.+18     	; 0x12ca <vfprintf+0x2d4>
    12b8:	83 2d       	mov	r24, r3
    12ba:	8e 7e       	andi	r24, 0xEE	; 238
    12bc:	a8 2e       	mov	r10, r24
    12be:	05 c0       	rjmp	.+10     	; 0x12ca <vfprintf+0x2d4>
    12c0:	b8 2c       	mov	r11, r8
    12c2:	a3 2c       	mov	r10, r3
    12c4:	03 c0       	rjmp	.+6      	; 0x12cc <vfprintf+0x2d6>
    12c6:	b8 2c       	mov	r11, r8
    12c8:	01 c0       	rjmp	.+2      	; 0x12cc <vfprintf+0x2d6>
    12ca:	b9 2c       	mov	r11, r9
    12cc:	a4 fe       	sbrs	r10, 4
    12ce:	0f c0       	rjmp	.+30     	; 0x12ee <vfprintf+0x2f8>
    12d0:	fe 01       	movw	r30, r28
    12d2:	e8 0d       	add	r30, r8
    12d4:	f1 1d       	adc	r31, r1
    12d6:	80 81       	ld	r24, Z
    12d8:	80 33       	cpi	r24, 0x30	; 48
    12da:	21 f4       	brne	.+8      	; 0x12e4 <vfprintf+0x2ee>
    12dc:	9a 2d       	mov	r25, r10
    12de:	99 7e       	andi	r25, 0xE9	; 233
    12e0:	a9 2e       	mov	r10, r25
    12e2:	09 c0       	rjmp	.+18     	; 0x12f6 <vfprintf+0x300>
    12e4:	a2 fe       	sbrs	r10, 2
    12e6:	06 c0       	rjmp	.+12     	; 0x12f4 <vfprintf+0x2fe>
    12e8:	b3 94       	inc	r11
    12ea:	b3 94       	inc	r11
    12ec:	04 c0       	rjmp	.+8      	; 0x12f6 <vfprintf+0x300>
    12ee:	8a 2d       	mov	r24, r10
    12f0:	86 78       	andi	r24, 0x86	; 134
    12f2:	09 f0       	breq	.+2      	; 0x12f6 <vfprintf+0x300>
    12f4:	b3 94       	inc	r11
    12f6:	a3 fc       	sbrc	r10, 3
    12f8:	11 c0       	rjmp	.+34     	; 0x131c <vfprintf+0x326>
    12fa:	a0 fe       	sbrs	r10, 0
    12fc:	06 c0       	rjmp	.+12     	; 0x130a <vfprintf+0x314>
    12fe:	b2 14       	cp	r11, r2
    1300:	88 f4       	brcc	.+34     	; 0x1324 <vfprintf+0x32e>
    1302:	28 0c       	add	r2, r8
    1304:	92 2c       	mov	r9, r2
    1306:	9b 18       	sub	r9, r11
    1308:	0e c0       	rjmp	.+28     	; 0x1326 <vfprintf+0x330>
    130a:	b2 14       	cp	r11, r2
    130c:	60 f4       	brcc	.+24     	; 0x1326 <vfprintf+0x330>
    130e:	b6 01       	movw	r22, r12
    1310:	80 e2       	ldi	r24, 0x20	; 32
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <fputc>
    1318:	b3 94       	inc	r11
    131a:	f7 cf       	rjmp	.-18     	; 0x130a <vfprintf+0x314>
    131c:	b2 14       	cp	r11, r2
    131e:	18 f4       	brcc	.+6      	; 0x1326 <vfprintf+0x330>
    1320:	2b 18       	sub	r2, r11
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <vfprintf+0x332>
    1324:	98 2c       	mov	r9, r8
    1326:	21 2c       	mov	r2, r1
    1328:	a4 fe       	sbrs	r10, 4
    132a:	10 c0       	rjmp	.+32     	; 0x134c <vfprintf+0x356>
    132c:	b6 01       	movw	r22, r12
    132e:	80 e3       	ldi	r24, 0x30	; 48
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <fputc>
    1336:	a2 fe       	sbrs	r10, 2
    1338:	17 c0       	rjmp	.+46     	; 0x1368 <vfprintf+0x372>
    133a:	a1 fc       	sbrc	r10, 1
    133c:	03 c0       	rjmp	.+6      	; 0x1344 <vfprintf+0x34e>
    133e:	88 e7       	ldi	r24, 0x78	; 120
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <vfprintf+0x352>
    1344:	88 e5       	ldi	r24, 0x58	; 88
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	b6 01       	movw	r22, r12
    134a:	0c c0       	rjmp	.+24     	; 0x1364 <vfprintf+0x36e>
    134c:	8a 2d       	mov	r24, r10
    134e:	86 78       	andi	r24, 0x86	; 134
    1350:	59 f0       	breq	.+22     	; 0x1368 <vfprintf+0x372>
    1352:	a1 fe       	sbrs	r10, 1
    1354:	02 c0       	rjmp	.+4      	; 0x135a <vfprintf+0x364>
    1356:	8b e2       	ldi	r24, 0x2B	; 43
    1358:	01 c0       	rjmp	.+2      	; 0x135c <vfprintf+0x366>
    135a:	80 e2       	ldi	r24, 0x20	; 32
    135c:	a7 fc       	sbrc	r10, 7
    135e:	8d e2       	ldi	r24, 0x2D	; 45
    1360:	b6 01       	movw	r22, r12
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <fputc>
    1368:	89 14       	cp	r8, r9
    136a:	38 f4       	brcc	.+14     	; 0x137a <vfprintf+0x384>
    136c:	b6 01       	movw	r22, r12
    136e:	80 e3       	ldi	r24, 0x30	; 48
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <fputc>
    1376:	9a 94       	dec	r9
    1378:	f7 cf       	rjmp	.-18     	; 0x1368 <vfprintf+0x372>
    137a:	8a 94       	dec	r8
    137c:	f3 01       	movw	r30, r6
    137e:	e8 0d       	add	r30, r8
    1380:	f1 1d       	adc	r31, r1
    1382:	80 81       	ld	r24, Z
    1384:	b6 01       	movw	r22, r12
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <fputc>
    138c:	81 10       	cpse	r8, r1
    138e:	f5 cf       	rjmp	.-22     	; 0x137a <vfprintf+0x384>
    1390:	22 20       	and	r2, r2
    1392:	09 f4       	brne	.+2      	; 0x1396 <vfprintf+0x3a0>
    1394:	42 ce       	rjmp	.-892    	; 0x101a <vfprintf+0x24>
    1396:	b6 01       	movw	r22, r12
    1398:	80 e2       	ldi	r24, 0x20	; 32
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <fputc>
    13a0:	2a 94       	dec	r2
    13a2:	f6 cf       	rjmp	.-20     	; 0x1390 <vfprintf+0x39a>
    13a4:	f6 01       	movw	r30, r12
    13a6:	86 81       	ldd	r24, Z+6	; 0x06
    13a8:	97 81       	ldd	r25, Z+7	; 0x07
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <vfprintf+0x3ba>
    13ac:	8f ef       	ldi	r24, 0xFF	; 255
    13ae:	9f ef       	ldi	r25, 0xFF	; 255
    13b0:	2b 96       	adiw	r28, 0x0b	; 11
    13b2:	e2 e1       	ldi	r30, 0x12	; 18
    13b4:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__epilogue_restores__>

000013b8 <strnlen_P>:
    13b8:	fc 01       	movw	r30, r24
    13ba:	05 90       	lpm	r0, Z+
    13bc:	61 50       	subi	r22, 0x01	; 1
    13be:	70 40       	sbci	r23, 0x00	; 0
    13c0:	01 10       	cpse	r0, r1
    13c2:	d8 f7       	brcc	.-10     	; 0x13ba <strnlen_P+0x2>
    13c4:	80 95       	com	r24
    13c6:	90 95       	com	r25
    13c8:	8e 0f       	add	r24, r30
    13ca:	9f 1f       	adc	r25, r31
    13cc:	08 95       	ret

000013ce <strnlen>:
    13ce:	fc 01       	movw	r30, r24
    13d0:	61 50       	subi	r22, 0x01	; 1
    13d2:	70 40       	sbci	r23, 0x00	; 0
    13d4:	01 90       	ld	r0, Z+
    13d6:	01 10       	cpse	r0, r1
    13d8:	d8 f7       	brcc	.-10     	; 0x13d0 <strnlen+0x2>
    13da:	80 95       	com	r24
    13dc:	90 95       	com	r25
    13de:	8e 0f       	add	r24, r30
    13e0:	9f 1f       	adc	r25, r31
    13e2:	08 95       	ret

000013e4 <fputc>:
    13e4:	0f 93       	push	r16
    13e6:	1f 93       	push	r17
    13e8:	cf 93       	push	r28
    13ea:	df 93       	push	r29
    13ec:	fb 01       	movw	r30, r22
    13ee:	23 81       	ldd	r18, Z+3	; 0x03
    13f0:	21 fd       	sbrc	r18, 1
    13f2:	03 c0       	rjmp	.+6      	; 0x13fa <fputc+0x16>
    13f4:	8f ef       	ldi	r24, 0xFF	; 255
    13f6:	9f ef       	ldi	r25, 0xFF	; 255
    13f8:	2c c0       	rjmp	.+88     	; 0x1452 <fputc+0x6e>
    13fa:	22 ff       	sbrs	r18, 2
    13fc:	16 c0       	rjmp	.+44     	; 0x142a <fputc+0x46>
    13fe:	46 81       	ldd	r20, Z+6	; 0x06
    1400:	57 81       	ldd	r21, Z+7	; 0x07
    1402:	24 81       	ldd	r18, Z+4	; 0x04
    1404:	35 81       	ldd	r19, Z+5	; 0x05
    1406:	42 17       	cp	r20, r18
    1408:	53 07       	cpc	r21, r19
    140a:	44 f4       	brge	.+16     	; 0x141c <fputc+0x38>
    140c:	a0 81       	ld	r26, Z
    140e:	b1 81       	ldd	r27, Z+1	; 0x01
    1410:	9d 01       	movw	r18, r26
    1412:	2f 5f       	subi	r18, 0xFF	; 255
    1414:	3f 4f       	sbci	r19, 0xFF	; 255
    1416:	31 83       	std	Z+1, r19	; 0x01
    1418:	20 83       	st	Z, r18
    141a:	8c 93       	st	X, r24
    141c:	26 81       	ldd	r18, Z+6	; 0x06
    141e:	37 81       	ldd	r19, Z+7	; 0x07
    1420:	2f 5f       	subi	r18, 0xFF	; 255
    1422:	3f 4f       	sbci	r19, 0xFF	; 255
    1424:	37 83       	std	Z+7, r19	; 0x07
    1426:	26 83       	std	Z+6, r18	; 0x06
    1428:	14 c0       	rjmp	.+40     	; 0x1452 <fputc+0x6e>
    142a:	8b 01       	movw	r16, r22
    142c:	ec 01       	movw	r28, r24
    142e:	fb 01       	movw	r30, r22
    1430:	00 84       	ldd	r0, Z+8	; 0x08
    1432:	f1 85       	ldd	r31, Z+9	; 0x09
    1434:	e0 2d       	mov	r30, r0
    1436:	09 95       	icall
    1438:	89 2b       	or	r24, r25
    143a:	e1 f6       	brne	.-72     	; 0x13f4 <fputc+0x10>
    143c:	d8 01       	movw	r26, r16
    143e:	16 96       	adiw	r26, 0x06	; 6
    1440:	8d 91       	ld	r24, X+
    1442:	9c 91       	ld	r25, X
    1444:	17 97       	sbiw	r26, 0x07	; 7
    1446:	01 96       	adiw	r24, 0x01	; 1
    1448:	17 96       	adiw	r26, 0x07	; 7
    144a:	9c 93       	st	X, r25
    144c:	8e 93       	st	-X, r24
    144e:	16 97       	sbiw	r26, 0x06	; 6
    1450:	ce 01       	movw	r24, r28
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	1f 91       	pop	r17
    1458:	0f 91       	pop	r16
    145a:	08 95       	ret

0000145c <__ultoa_invert>:
    145c:	fa 01       	movw	r30, r20
    145e:	aa 27       	eor	r26, r26
    1460:	28 30       	cpi	r18, 0x08	; 8
    1462:	51 f1       	breq	.+84     	; 0x14b8 <__ultoa_invert+0x5c>
    1464:	20 31       	cpi	r18, 0x10	; 16
    1466:	81 f1       	breq	.+96     	; 0x14c8 <__ultoa_invert+0x6c>
    1468:	e8 94       	clt
    146a:	6f 93       	push	r22
    146c:	6e 7f       	andi	r22, 0xFE	; 254
    146e:	6e 5f       	subi	r22, 0xFE	; 254
    1470:	7f 4f       	sbci	r23, 0xFF	; 255
    1472:	8f 4f       	sbci	r24, 0xFF	; 255
    1474:	9f 4f       	sbci	r25, 0xFF	; 255
    1476:	af 4f       	sbci	r26, 0xFF	; 255
    1478:	b1 e0       	ldi	r27, 0x01	; 1
    147a:	3e d0       	rcall	.+124    	; 0x14f8 <__ultoa_invert+0x9c>
    147c:	b4 e0       	ldi	r27, 0x04	; 4
    147e:	3c d0       	rcall	.+120    	; 0x14f8 <__ultoa_invert+0x9c>
    1480:	67 0f       	add	r22, r23
    1482:	78 1f       	adc	r23, r24
    1484:	89 1f       	adc	r24, r25
    1486:	9a 1f       	adc	r25, r26
    1488:	a1 1d       	adc	r26, r1
    148a:	68 0f       	add	r22, r24
    148c:	79 1f       	adc	r23, r25
    148e:	8a 1f       	adc	r24, r26
    1490:	91 1d       	adc	r25, r1
    1492:	a1 1d       	adc	r26, r1
    1494:	6a 0f       	add	r22, r26
    1496:	71 1d       	adc	r23, r1
    1498:	81 1d       	adc	r24, r1
    149a:	91 1d       	adc	r25, r1
    149c:	a1 1d       	adc	r26, r1
    149e:	20 d0       	rcall	.+64     	; 0x14e0 <__ultoa_invert+0x84>
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <__ultoa_invert+0x48>
    14a2:	68 94       	set
    14a4:	3f 91       	pop	r19
    14a6:	2a e0       	ldi	r18, 0x0A	; 10
    14a8:	26 9f       	mul	r18, r22
    14aa:	11 24       	eor	r1, r1
    14ac:	30 19       	sub	r19, r0
    14ae:	30 5d       	subi	r19, 0xD0	; 208
    14b0:	31 93       	st	Z+, r19
    14b2:	de f6       	brtc	.-74     	; 0x146a <__ultoa_invert+0xe>
    14b4:	cf 01       	movw	r24, r30
    14b6:	08 95       	ret
    14b8:	46 2f       	mov	r20, r22
    14ba:	47 70       	andi	r20, 0x07	; 7
    14bc:	40 5d       	subi	r20, 0xD0	; 208
    14be:	41 93       	st	Z+, r20
    14c0:	b3 e0       	ldi	r27, 0x03	; 3
    14c2:	0f d0       	rcall	.+30     	; 0x14e2 <__ultoa_invert+0x86>
    14c4:	c9 f7       	brne	.-14     	; 0x14b8 <__ultoa_invert+0x5c>
    14c6:	f6 cf       	rjmp	.-20     	; 0x14b4 <__ultoa_invert+0x58>
    14c8:	46 2f       	mov	r20, r22
    14ca:	4f 70       	andi	r20, 0x0F	; 15
    14cc:	40 5d       	subi	r20, 0xD0	; 208
    14ce:	4a 33       	cpi	r20, 0x3A	; 58
    14d0:	18 f0       	brcs	.+6      	; 0x14d8 <__ultoa_invert+0x7c>
    14d2:	49 5d       	subi	r20, 0xD9	; 217
    14d4:	31 fd       	sbrc	r19, 1
    14d6:	40 52       	subi	r20, 0x20	; 32
    14d8:	41 93       	st	Z+, r20
    14da:	02 d0       	rcall	.+4      	; 0x14e0 <__ultoa_invert+0x84>
    14dc:	a9 f7       	brne	.-22     	; 0x14c8 <__ultoa_invert+0x6c>
    14de:	ea cf       	rjmp	.-44     	; 0x14b4 <__ultoa_invert+0x58>
    14e0:	b4 e0       	ldi	r27, 0x04	; 4
    14e2:	a6 95       	lsr	r26
    14e4:	97 95       	ror	r25
    14e6:	87 95       	ror	r24
    14e8:	77 95       	ror	r23
    14ea:	67 95       	ror	r22
    14ec:	ba 95       	dec	r27
    14ee:	c9 f7       	brne	.-14     	; 0x14e2 <__ultoa_invert+0x86>
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	61 05       	cpc	r22, r1
    14f4:	71 05       	cpc	r23, r1
    14f6:	08 95       	ret
    14f8:	9b 01       	movw	r18, r22
    14fa:	ac 01       	movw	r20, r24
    14fc:	0a 2e       	mov	r0, r26
    14fe:	06 94       	lsr	r0
    1500:	57 95       	ror	r21
    1502:	47 95       	ror	r20
    1504:	37 95       	ror	r19
    1506:	27 95       	ror	r18
    1508:	ba 95       	dec	r27
    150a:	c9 f7       	brne	.-14     	; 0x14fe <__ultoa_invert+0xa2>
    150c:	62 0f       	add	r22, r18
    150e:	73 1f       	adc	r23, r19
    1510:	84 1f       	adc	r24, r20
    1512:	95 1f       	adc	r25, r21
    1514:	a0 1d       	adc	r26, r0
    1516:	08 95       	ret

00001518 <__prologue_saves__>:
    1518:	2f 92       	push	r2
    151a:	3f 92       	push	r3
    151c:	4f 92       	push	r4
    151e:	5f 92       	push	r5
    1520:	6f 92       	push	r6
    1522:	7f 92       	push	r7
    1524:	8f 92       	push	r8
    1526:	9f 92       	push	r9
    1528:	af 92       	push	r10
    152a:	bf 92       	push	r11
    152c:	cf 92       	push	r12
    152e:	df 92       	push	r13
    1530:	ef 92       	push	r14
    1532:	ff 92       	push	r15
    1534:	0f 93       	push	r16
    1536:	1f 93       	push	r17
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	ca 1b       	sub	r28, r26
    1542:	db 0b       	sbc	r29, r27
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
    154e:	09 94       	ijmp

00001550 <__epilogue_restores__>:
    1550:	2a 88       	ldd	r2, Y+18	; 0x12
    1552:	39 88       	ldd	r3, Y+17	; 0x11
    1554:	48 88       	ldd	r4, Y+16	; 0x10
    1556:	5f 84       	ldd	r5, Y+15	; 0x0f
    1558:	6e 84       	ldd	r6, Y+14	; 0x0e
    155a:	7d 84       	ldd	r7, Y+13	; 0x0d
    155c:	8c 84       	ldd	r8, Y+12	; 0x0c
    155e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1560:	aa 84       	ldd	r10, Y+10	; 0x0a
    1562:	b9 84       	ldd	r11, Y+9	; 0x09
    1564:	c8 84       	ldd	r12, Y+8	; 0x08
    1566:	df 80       	ldd	r13, Y+7	; 0x07
    1568:	ee 80       	ldd	r14, Y+6	; 0x06
    156a:	fd 80       	ldd	r15, Y+5	; 0x05
    156c:	0c 81       	ldd	r16, Y+4	; 0x04
    156e:	1b 81       	ldd	r17, Y+3	; 0x03
    1570:	aa 81       	ldd	r26, Y+2	; 0x02
    1572:	b9 81       	ldd	r27, Y+1	; 0x01
    1574:	ce 0f       	add	r28, r30
    1576:	d1 1d       	adc	r29, r1
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	ed 01       	movw	r28, r26
    1584:	08 95       	ret

00001586 <_exit>:
    1586:	f8 94       	cli

00001588 <__stop_program>:
    1588:	ff cf       	rjmp	.-2      	; 0x1588 <__stop_program>
